// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace corepb {
class AccountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Account> {
} _Account_default_instance_;
class ContractMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContractMeta> {
} _ContractMeta_default_instance_;
class DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Data> {
} _Data_default_instance_;
class TransactionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Transaction> {
} _Transaction_default_instance_;
class BlockHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockHeader> {
} _BlockHeader_default_instance_;
class BlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Block> {
} _Block_default_instance_;
class NetBlocksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetBlocks> {
} _NetBlocks_default_instance_;
class NetBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetBlock> {
} _NetBlock_default_instance_;
class DownloadBlockDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadBlock> {
} _DownloadBlock_default_instance_;
class RandomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Random> {
} _Random_default_instance_;

namespace protobuf_block_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, vars_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, birth_place_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, contract_meta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContractMeta, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, chain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, gas_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, gas_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, sign_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, parent_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, coinbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, chain_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, state_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, txs_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, events_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, consensus_root_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockHeader, random_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, transactions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, dependency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlocks, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlocks, batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlocks, blocks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlock, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlock, batch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetBlock, block_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadBlock, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadBlock, sign_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Random, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Random, vrf_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Random, vrf_proof_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Account)},
  { 10, -1, sizeof(ContractMeta)},
  { 15, -1, sizeof(Data)},
  { 21, -1, sizeof(Transaction)},
  { 37, -1, sizeof(BlockHeader)},
  { 53, -1, sizeof(Block)},
  { 61, -1, sizeof(NetBlocks)},
  { 68, -1, sizeof(NetBlock)},
  { 75, -1, sizeof(DownloadBlock)},
  { 81, -1, sizeof(Random)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Account_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContractMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BlockHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Block_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetBlocks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DownloadBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Random_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "block.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Account_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ContractMeta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Data_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Transaction_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _BlockHeader_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Block_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _NetBlocks_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _NetBlock_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DownloadBlock_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Random_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::dagpb::protobuf_dag_2eproto::InitDefaults();
  ::consensuspb::protobuf_state_2eproto::InitDefaults();
  _Account_default_instance_.DefaultConstruct();
  _ContractMeta_default_instance_.DefaultConstruct();
  _Data_default_instance_.DefaultConstruct();
  _Transaction_default_instance_.DefaultConstruct();
  _BlockHeader_default_instance_.DefaultConstruct();
  _Block_default_instance_.DefaultConstruct();
  _NetBlocks_default_instance_.DefaultConstruct();
  _NetBlock_default_instance_.DefaultConstruct();
  _DownloadBlock_default_instance_.DefaultConstruct();
  _Random_default_instance_.DefaultConstruct();
  _Account_default_instance_.get_mutable()->contract_meta_ = const_cast< ::corepb::ContractMeta*>(
      ::corepb::ContractMeta::internal_default_instance());
  _Transaction_default_instance_.get_mutable()->data_ = const_cast< ::corepb::Data*>(
      ::corepb::Data::internal_default_instance());
  _BlockHeader_default_instance_.get_mutable()->consensus_root_ = const_cast< ::consensuspb::ConsensusRoot*>(
      ::consensuspb::ConsensusRoot::internal_default_instance());
  _BlockHeader_default_instance_.get_mutable()->random_ = const_cast< ::corepb::Random*>(
      ::corepb::Random::internal_default_instance());
  _Block_default_instance_.get_mutable()->header_ = const_cast< ::corepb::BlockHeader*>(
      ::corepb::BlockHeader::internal_default_instance());
  _Block_default_instance_.get_mutable()->dependency_ = const_cast< ::dagpb::Dag*>(
      ::dagpb::Dag::internal_default_instance());
  _NetBlock_default_instance_.get_mutable()->block_ = const_cast< ::corepb::Block*>(
      ::corepb::Block::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013block.proto\022\006corepb\032\tdag.proto\032\013state."
      "proto\"\217\001\n\007Account\022\017\n\007address\030\001 \001(\014\022\017\n\007ba"
      "lance\030\002 \001(\014\022\r\n\005nonce\030\003 \001(\004\022\021\n\tvars_hash\030"
      "\004 \001(\014\022\023\n\013birth_place\030\005 \001(\014\022+\n\rcontract_m"
      "eta\030\006 \001(\0132\024.corepb.ContractMeta\"\037\n\014Contr"
      "actMeta\022\017\n\007version\030\001 \001(\t\"%\n\004Data\022\014\n\004type"
      "\030\001 \001(\t\022\017\n\007payload\030\002 \001(\014\"\325\001\n\013Transaction\022"
      "\014\n\004hash\030\001 \001(\014\022\014\n\004from\030\002 \001(\014\022\n\n\002to\030\003 \001(\014\022"
      "\r\n\005value\030\004 \001(\014\022\r\n\005nonce\030\005 \001(\004\022\021\n\ttimesta"
      "mp\030\006 \001(\003\022\032\n\004data\030\007 \001(\0132\014.corepb.Data\022\020\n\010"
      "chain_id\030\010 \001(\r\022\021\n\tgas_price\030\t \001(\014\022\021\n\tgas"
      "_limit\030\n \001(\014\022\013\n\003alg\030\013 \001(\r\022\014\n\004sign\030\014 \001(\014\""
      "\227\002\n\013BlockHeader\022\014\n\004hash\030\001 \001(\014\022\023\n\013parent_"
      "hash\030\002 \001(\014\022\020\n\010coinbase\030\004 \001(\014\022\021\n\ttimestam"
      "p\030\005 \001(\003\022\020\n\010chain_id\030\006 \001(\r\022\013\n\003alg\030\007 \001(\r\022\014"
      "\n\004sign\030\010 \001(\014\022\022\n\nstate_root\030\t \001(\014\022\020\n\010txs_"
      "root\030\n \001(\014\022\023\n\013events_root\030\013 \001(\014\0222\n\016conse"
      "nsus_root\030\014 \001(\0132\032.consensuspb.ConsensusR"
      "oot\022\036\n\006random\030\r \001(\0132\016.corepb.RandomJ\004\010\003\020"
      "\004\"\207\001\n\005Block\022#\n\006header\030\001 \001(\0132\023.corepb.Blo"
      "ckHeader\022)\n\014transactions\030\002 \003(\0132\023.corepb."
      "Transaction\022\036\n\ndependency\030\003 \001(\0132\n.dagpb."
      "Dag\022\016\n\006height\030\004 \001(\004\"G\n\tNetBlocks\022\014\n\004from"
      "\030\001 \001(\t\022\r\n\005batch\030\002 \001(\004\022\035\n\006blocks\030\003 \003(\0132\r."
      "corepb.Block\"E\n\010NetBlock\022\014\n\004from\030\001 \001(\t\022\r"
      "\n\005batch\030\002 \001(\004\022\034\n\005block\030\003 \001(\0132\r.corepb.Bl"
      "ock\"+\n\rDownloadBlock\022\014\n\004hash\030\001 \001(\014\022\014\n\004si"
      "gn\030\002 \001(\014\"-\n\006Random\022\020\n\010vrf_seed\030\001 \001(\014\022\021\n\t"
      "vrf_proof\030\002 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "block.proto", &protobuf_RegisterTypes);
  ::dagpb::protobuf_dag_2eproto::AddDescriptors();
  ::consensuspb::protobuf_state_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_block_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Account::kAddressFieldNumber;
const int Account::kBalanceFieldNumber;
const int Account::kNonceFieldNumber;
const int Account::kVarsHashFieldNumber;
const int Account::kBirthPlaceFieldNumber;
const int Account::kContractMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Account::Account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Account)
}
Account::Account(const Account& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  balance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.balance().size() > 0) {
    balance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  vars_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vars_hash().size() > 0) {
    vars_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vars_hash_);
  }
  birth_place_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.birth_place().size() > 0) {
    birth_place_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.birth_place_);
  }
  if (from.has_contract_meta()) {
    contract_meta_ = new ::corepb::ContractMeta(*from.contract_meta_);
  } else {
    contract_meta_ = NULL;
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:corepb.Account)
}

void Account::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vars_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birth_place_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&contract_meta_, 0, reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&contract_meta_) + sizeof(nonce_));
  _cached_size_ = 0;
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:corepb.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vars_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birth_place_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete contract_meta_;
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[0].descriptor;
}

const Account& Account::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

Account* Account::New(::google::protobuf::Arena* arena) const {
  Account* n = new Account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Account)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vars_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  birth_place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && contract_meta_ != NULL) {
    delete contract_meta_;
  }
  contract_meta_ = NULL;
  nonce_ = GOOGLE_ULONGLONG(0);
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes balance = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_balance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nonce = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes vars_hash = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vars_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes birth_place = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_birth_place()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .corepb.ContractMeta contract_meta = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contract_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Account)
  // bytes address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // bytes balance = 2;
  if (this->balance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->balance(), output);
  }

  // uint64 nonce = 3;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->nonce(), output);
  }

  // bytes vars_hash = 4;
  if (this->vars_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->vars_hash(), output);
  }

  // bytes birth_place = 5;
  if (this->birth_place().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->birth_place(), output);
  }

  // .corepb.ContractMeta contract_meta = 6;
  if (this->has_contract_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->contract_meta_, output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Account)
}

::google::protobuf::uint8* Account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Account)
  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // bytes balance = 2;
  if (this->balance().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->balance(), target);
  }

  // uint64 nonce = 3;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->nonce(), target);
  }

  // bytes vars_hash = 4;
  if (this->vars_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->vars_hash(), target);
  }

  // bytes birth_place = 5;
  if (this->birth_place().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->birth_place(), target);
  }

  // .corepb.ContractMeta contract_meta = 6;
  if (this->has_contract_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->contract_meta_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Account)
  size_t total_size = 0;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // bytes balance = 2;
  if (this->balance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->balance());
  }

  // bytes vars_hash = 4;
  if (this->vars_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->vars_hash());
  }

  // bytes birth_place = 5;
  if (this->birth_place().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->birth_place());
  }

  // .corepb.ContractMeta contract_meta = 6;
  if (this->has_contract_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->contract_meta_);
  }

  // uint64 nonce = 3;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.balance().size() > 0) {

    balance_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.balance_);
  }
  if (from.vars_hash().size() > 0) {

    vars_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vars_hash_);
  }
  if (from.birth_place().size() > 0) {

    birth_place_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.birth_place_);
  }
  if (from.has_contract_meta()) {
    mutable_contract_meta()->::corepb::ContractMeta::MergeFrom(from.contract_meta());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::Swap(Account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Account::InternalSwap(Account* other) {
  address_.Swap(&other->address_);
  balance_.Swap(&other->balance_);
  vars_hash_.Swap(&other->vars_hash_);
  birth_place_.Swap(&other->birth_place_);
  std::swap(contract_meta_, other->contract_meta_);
  std::swap(nonce_, other->nonce_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Account

// bytes address = 1;
void Account::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Account::address() const {
  // @@protoc_insertion_point(field_get:corepb.Account.address)
  return address_.GetNoArena();
}
void Account::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.address)
}
#if LANG_CXX11
void Account::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.address)
}
#endif
void Account::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.address)
}
void Account::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.address)
}
::std::string* Account::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_address() {
  // @@protoc_insertion_point(field_release:corepb.Account.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.address)
}

// bytes balance = 2;
void Account::clear_balance() {
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Account::balance() const {
  // @@protoc_insertion_point(field_get:corepb.Account.balance)
  return balance_.GetNoArena();
}
void Account::set_balance(const ::std::string& value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.balance)
}
#if LANG_CXX11
void Account::set_balance(::std::string&& value) {
  
  balance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.balance)
}
#endif
void Account::set_balance(const char* value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.balance)
}
void Account::set_balance(const void* value, size_t size) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.balance)
}
::std::string* Account::mutable_balance() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.balance)
  return balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_balance() {
  // @@protoc_insertion_point(field_release:corepb.Account.balance)
  
  return balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_balance(::std::string* balance) {
  if (balance != NULL) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.balance)
}

// uint64 nonce = 3;
void Account::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Account::nonce() const {
  // @@protoc_insertion_point(field_get:corepb.Account.nonce)
  return nonce_;
}
void Account::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:corepb.Account.nonce)
}

// bytes vars_hash = 4;
void Account::clear_vars_hash() {
  vars_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Account::vars_hash() const {
  // @@protoc_insertion_point(field_get:corepb.Account.vars_hash)
  return vars_hash_.GetNoArena();
}
void Account::set_vars_hash(const ::std::string& value) {
  
  vars_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.vars_hash)
}
#if LANG_CXX11
void Account::set_vars_hash(::std::string&& value) {
  
  vars_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.vars_hash)
}
#endif
void Account::set_vars_hash(const char* value) {
  
  vars_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.vars_hash)
}
void Account::set_vars_hash(const void* value, size_t size) {
  
  vars_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.vars_hash)
}
::std::string* Account::mutable_vars_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.vars_hash)
  return vars_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_vars_hash() {
  // @@protoc_insertion_point(field_release:corepb.Account.vars_hash)
  
  return vars_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_vars_hash(::std::string* vars_hash) {
  if (vars_hash != NULL) {
    
  } else {
    
  }
  vars_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vars_hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.vars_hash)
}

// bytes birth_place = 5;
void Account::clear_birth_place() {
  birth_place_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Account::birth_place() const {
  // @@protoc_insertion_point(field_get:corepb.Account.birth_place)
  return birth_place_.GetNoArena();
}
void Account::set_birth_place(const ::std::string& value) {
  
  birth_place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Account.birth_place)
}
#if LANG_CXX11
void Account::set_birth_place(::std::string&& value) {
  
  birth_place_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Account.birth_place)
}
#endif
void Account::set_birth_place(const char* value) {
  
  birth_place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Account.birth_place)
}
void Account::set_birth_place(const void* value, size_t size) {
  
  birth_place_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Account.birth_place)
}
::std::string* Account::mutable_birth_place() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Account.birth_place)
  return birth_place_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Account::release_birth_place() {
  // @@protoc_insertion_point(field_release:corepb.Account.birth_place)
  
  return birth_place_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Account::set_allocated_birth_place(::std::string* birth_place) {
  if (birth_place != NULL) {
    
  } else {
    
  }
  birth_place_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), birth_place);
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.birth_place)
}

// .corepb.ContractMeta contract_meta = 6;
bool Account::has_contract_meta() const {
  return this != internal_default_instance() && contract_meta_ != NULL;
}
void Account::clear_contract_meta() {
  if (GetArenaNoVirtual() == NULL && contract_meta_ != NULL) delete contract_meta_;
  contract_meta_ = NULL;
}
const ::corepb::ContractMeta& Account::contract_meta() const {
  // @@protoc_insertion_point(field_get:corepb.Account.contract_meta)
  return contract_meta_ != NULL ? *contract_meta_
                         : *::corepb::ContractMeta::internal_default_instance();
}
::corepb::ContractMeta* Account::mutable_contract_meta() {
  
  if (contract_meta_ == NULL) {
    contract_meta_ = new ::corepb::ContractMeta;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Account.contract_meta)
  return contract_meta_;
}
::corepb::ContractMeta* Account::release_contract_meta() {
  // @@protoc_insertion_point(field_release:corepb.Account.contract_meta)
  
  ::corepb::ContractMeta* temp = contract_meta_;
  contract_meta_ = NULL;
  return temp;
}
void Account::set_allocated_contract_meta(::corepb::ContractMeta* contract_meta) {
  delete contract_meta_;
  contract_meta_ = contract_meta;
  if (contract_meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Account.contract_meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContractMeta::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContractMeta::ContractMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.ContractMeta)
}
ContractMeta::ContractMeta(const ContractMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  // @@protoc_insertion_point(copy_constructor:corepb.ContractMeta)
}

void ContractMeta::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ContractMeta::~ContractMeta() {
  // @@protoc_insertion_point(destructor:corepb.ContractMeta)
  SharedDtor();
}

void ContractMeta::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContractMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContractMeta::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[1].descriptor;
}

const ContractMeta& ContractMeta::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContractMeta* ContractMeta::New(::google::protobuf::Arena* arena) const {
  ContractMeta* n = new ContractMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContractMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.ContractMeta)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ContractMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.ContractMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.ContractMeta.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.ContractMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.ContractMeta)
  return false;
#undef DO_
}

void ContractMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.ContractMeta)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.ContractMeta.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.ContractMeta)
}

::google::protobuf::uint8* ContractMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.ContractMeta)
  // string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.ContractMeta.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.ContractMeta)
  return target;
}

size_t ContractMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.ContractMeta)
  size_t total_size = 0;

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContractMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.ContractMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContractMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.ContractMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.ContractMeta)
    MergeFrom(*source);
  }
}

void ContractMeta::MergeFrom(const ContractMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.ContractMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void ContractMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.ContractMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractMeta::CopyFrom(const ContractMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.ContractMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractMeta::IsInitialized() const {
  return true;
}

void ContractMeta::Swap(ContractMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContractMeta::InternalSwap(ContractMeta* other) {
  version_.Swap(&other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContractMeta::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContractMeta

// string version = 1;
void ContractMeta::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ContractMeta::version() const {
  // @@protoc_insertion_point(field_get:corepb.ContractMeta.version)
  return version_.GetNoArena();
}
void ContractMeta::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.ContractMeta.version)
}
#if LANG_CXX11
void ContractMeta::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.ContractMeta.version)
}
#endif
void ContractMeta::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.ContractMeta.version)
}
void ContractMeta::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.ContractMeta.version)
}
::std::string* ContractMeta::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:corepb.ContractMeta.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContractMeta::release_version() {
  // @@protoc_insertion_point(field_release:corepb.ContractMeta.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContractMeta::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:corepb.ContractMeta.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kTypeFieldNumber;
const int Data::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:corepb.Data)
}

void Data::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:corepb.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[2].descriptor;
}

const Data& Data::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Data)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.Data.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Data)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.Data.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Data)
  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.Data.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Data)
  size_t total_size = 0;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // bytes payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  type_.Swap(&other->type_);
  payload_.Swap(&other->payload_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// string type = 1;
void Data::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Data::type() const {
  // @@protoc_insertion_point(field_get:corepb.Data.type)
  return type_.GetNoArena();
}
void Data::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Data.type)
}
#if LANG_CXX11
void Data::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Data.type)
}
#endif
void Data::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Data.type)
}
void Data::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Data.type)
}
::std::string* Data::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Data.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Data::release_type() {
  // @@protoc_insertion_point(field_release:corepb.Data.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Data::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:corepb.Data.type)
}

// bytes payload = 2;
void Data::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Data::payload() const {
  // @@protoc_insertion_point(field_get:corepb.Data.payload)
  return payload_.GetNoArena();
}
void Data::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Data.payload)
}
#if LANG_CXX11
void Data::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Data.payload)
}
#endif
void Data::set_payload(const char* value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Data.payload)
}
void Data::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Data.payload)
}
::std::string* Data::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Data.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Data::release_payload() {
  // @@protoc_insertion_point(field_release:corepb.Data.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Data::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:corepb.Data.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kHashFieldNumber;
const int Transaction::kFromFieldNumber;
const int Transaction::kToFieldNumber;
const int Transaction::kValueFieldNumber;
const int Transaction::kNonceFieldNumber;
const int Transaction::kTimestampFieldNumber;
const int Transaction::kDataFieldNumber;
const int Transaction::kChainIdFieldNumber;
const int Transaction::kGasPriceFieldNumber;
const int Transaction::kGasLimitFieldNumber;
const int Transaction::kAlgFieldNumber;
const int Transaction::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to().size() > 0) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  gas_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gas_price().size() > 0) {
    gas_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_price_);
  }
  gas_limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gas_limit().size() > 0) {
    gas_limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_limit_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.has_data()) {
    data_ = new ::corepb::Data(*from.data_);
  } else {
    data_ = NULL;
  }
  ::memcpy(&nonce_, &from.nonce_,
    reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&nonce_) + sizeof(alg_));
  // @@protoc_insertion_point(copy_constructor:corepb.Transaction)
}

void Transaction::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_limit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&data_) + sizeof(alg_));
  _cached_size_ = 0;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:corepb.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_limit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[3].descriptor;
}

const Transaction& Transaction::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Transaction)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gas_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ::memset(&nonce_, 0, reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&nonce_) + sizeof(alg_));
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes from = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes to = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nonce = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .corepb.Data data = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chain_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gas_price = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gas_price()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes gas_limit = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gas_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 alg = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sign = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Transaction)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // bytes from = 2;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->from(), output);
  }

  // bytes to = 3;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->to(), output);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // uint64 nonce = 5;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->nonce(), output);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->timestamp(), output);
  }

  // .corepb.Data data = 7;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->data_, output);
  }

  // uint32 chain_id = 8;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->chain_id(), output);
  }

  // bytes gas_price = 9;
  if (this->gas_price().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->gas_price(), output);
  }

  // bytes gas_limit = 10;
  if (this->gas_limit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->gas_limit(), output);
  }

  // uint32 alg = 11;
  if (this->alg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->alg(), output);
  }

  // bytes sign = 12;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->sign(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Transaction)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // bytes from = 2;
  if (this->from().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->from(), target);
  }

  // bytes to = 3;
  if (this->to().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->to(), target);
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // uint64 nonce = 5;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->nonce(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->timestamp(), target);
  }

  // .corepb.Data data = 7;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->data_, false, target);
  }

  // uint32 chain_id = 8;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->chain_id(), target);
  }

  // bytes gas_price = 9;
  if (this->gas_price().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->gas_price(), target);
  }

  // bytes gas_limit = 10;
  if (this->gas_limit().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->gas_limit(), target);
  }

  // uint32 alg = 11;
  if (this->alg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->alg(), target);
  }

  // bytes sign = 12;
  if (this->sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sign(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Transaction)
  size_t total_size = 0;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes from = 2;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->from());
  }

  // bytes to = 3;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->to());
  }

  // bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // bytes gas_price = 9;
  if (this->gas_price().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gas_price());
  }

  // bytes gas_limit = 10;
  if (this->gas_limit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->gas_limit());
  }

  // bytes sign = 12;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());
  }

  // .corepb.Data data = 7;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // uint64 nonce = 5;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nonce());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 chain_id = 8;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chain_id());
  }

  // uint32 alg = 11;
  if (this->alg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.gas_price().size() > 0) {

    gas_price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_price_);
  }
  if (from.gas_limit().size() > 0) {

    gas_limit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gas_limit_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.has_data()) {
    mutable_data()->::corepb::Data::MergeFrom(from.data());
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
  if (from.alg() != 0) {
    set_alg(from.alg());
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  hash_.Swap(&other->hash_);
  from_.Swap(&other->from_);
  to_.Swap(&other->to_);
  value_.Swap(&other->value_);
  gas_price_.Swap(&other->gas_price_);
  gas_limit_.Swap(&other->gas_limit_);
  sign_.Swap(&other->sign_);
  std::swap(data_, other->data_);
  std::swap(nonce_, other->nonce_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(chain_id_, other->chain_id_);
  std::swap(alg_, other->alg_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// bytes hash = 1;
void Transaction::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::hash() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.hash)
  return hash_.GetNoArena();
}
void Transaction::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.hash)
}
#if LANG_CXX11
void Transaction::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.hash)
}
#endif
void Transaction::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.hash)
}
void Transaction::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.hash)
}
::std::string* Transaction::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.hash)
}

// bytes from = 2;
void Transaction::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::from() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.from)
  return from_.GetNoArena();
}
void Transaction::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.from)
}
#if LANG_CXX11
void Transaction::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.from)
}
#endif
void Transaction::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.from)
}
void Transaction::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.from)
}
::std::string* Transaction::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_from() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.from)
}

// bytes to = 3;
void Transaction::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::to() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.to)
  return to_.GetNoArena();
}
void Transaction::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.to)
}
#if LANG_CXX11
void Transaction::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.to)
}
#endif
void Transaction::set_to(const char* value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.to)
}
void Transaction::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.to)
}
::std::string* Transaction::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_to() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.to)
}

// bytes value = 4;
void Transaction::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::value() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.value)
  return value_.GetNoArena();
}
void Transaction::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.value)
}
#if LANG_CXX11
void Transaction::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.value)
}
#endif
void Transaction::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.value)
}
void Transaction::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.value)
}
::std::string* Transaction::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_value() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.value)
}

// uint64 nonce = 5;
void Transaction::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Transaction::nonce() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.nonce)
  return nonce_;
}
void Transaction::set_nonce(::google::protobuf::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.nonce)
}

// int64 timestamp = 6;
void Transaction::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.timestamp)
  return timestamp_;
}
void Transaction::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.timestamp)
}

// .corepb.Data data = 7;
bool Transaction::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void Transaction::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::corepb::Data& Transaction::data() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.data)
  return data_ != NULL ? *data_
                         : *::corepb::Data::internal_default_instance();
}
::corepb::Data* Transaction::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::corepb::Data;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.data)
  return data_;
}
::corepb::Data* Transaction::release_data() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.data)
  
  ::corepb::Data* temp = data_;
  data_ = NULL;
  return temp;
}
void Transaction::set_allocated_data(::corepb::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.data)
}

// uint32 chain_id = 8;
void Transaction::clear_chain_id() {
  chain_id_ = 0u;
}
::google::protobuf::uint32 Transaction::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.chain_id)
  return chain_id_;
}
void Transaction::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.chain_id)
}

// bytes gas_price = 9;
void Transaction::clear_gas_price() {
  gas_price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::gas_price() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.gas_price)
  return gas_price_.GetNoArena();
}
void Transaction::set_gas_price(const ::std::string& value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.gas_price)
}
#if LANG_CXX11
void Transaction::set_gas_price(::std::string&& value) {
  
  gas_price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.gas_price)
}
#endif
void Transaction::set_gas_price(const char* value) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.gas_price)
}
void Transaction::set_gas_price(const void* value, size_t size) {
  
  gas_price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.gas_price)
}
::std::string* Transaction::mutable_gas_price() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.gas_price)
  return gas_price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_gas_price() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.gas_price)
  
  return gas_price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_gas_price(::std::string* gas_price) {
  if (gas_price != NULL) {
    
  } else {
    
  }
  gas_price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_price);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.gas_price)
}

// bytes gas_limit = 10;
void Transaction::clear_gas_limit() {
  gas_limit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::gas_limit() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.gas_limit)
  return gas_limit_.GetNoArena();
}
void Transaction::set_gas_limit(const ::std::string& value) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.gas_limit)
}
#if LANG_CXX11
void Transaction::set_gas_limit(::std::string&& value) {
  
  gas_limit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.gas_limit)
}
#endif
void Transaction::set_gas_limit(const char* value) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.gas_limit)
}
void Transaction::set_gas_limit(const void* value, size_t size) {
  
  gas_limit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.gas_limit)
}
::std::string* Transaction::mutable_gas_limit() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.gas_limit)
  return gas_limit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_gas_limit() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.gas_limit)
  
  return gas_limit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_gas_limit(::std::string* gas_limit) {
  if (gas_limit != NULL) {
    
  } else {
    
  }
  gas_limit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gas_limit);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.gas_limit)
}

// uint32 alg = 11;
void Transaction::clear_alg() {
  alg_ = 0u;
}
::google::protobuf::uint32 Transaction::alg() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.alg)
  return alg_;
}
void Transaction::set_alg(::google::protobuf::uint32 value) {
  
  alg_ = value;
  // @@protoc_insertion_point(field_set:corepb.Transaction.alg)
}

// bytes sign = 12;
void Transaction::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Transaction::sign() const {
  // @@protoc_insertion_point(field_get:corepb.Transaction.sign)
  return sign_.GetNoArena();
}
void Transaction::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Transaction.sign)
}
#if LANG_CXX11
void Transaction::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Transaction.sign)
}
#endif
void Transaction::set_sign(const char* value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Transaction.sign)
}
void Transaction::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Transaction.sign)
}
::std::string* Transaction::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Transaction.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transaction::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.Transaction.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transaction::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:corepb.Transaction.sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockHeader::kHashFieldNumber;
const int BlockHeader::kParentHashFieldNumber;
const int BlockHeader::kCoinbaseFieldNumber;
const int BlockHeader::kTimestampFieldNumber;
const int BlockHeader::kChainIdFieldNumber;
const int BlockHeader::kAlgFieldNumber;
const int BlockHeader::kSignFieldNumber;
const int BlockHeader::kStateRootFieldNumber;
const int BlockHeader::kTxsRootFieldNumber;
const int BlockHeader::kEventsRootFieldNumber;
const int BlockHeader::kConsensusRootFieldNumber;
const int BlockHeader::kRandomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockHeader::BlockHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  parent_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_hash().size() > 0) {
    parent_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_hash_);
  }
  coinbase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coinbase().size() > 0) {
    coinbase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coinbase_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  state_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state_root().size() > 0) {
    state_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_root_);
  }
  txs_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.txs_root().size() > 0) {
    txs_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txs_root_);
  }
  events_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.events_root().size() > 0) {
    events_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.events_root_);
  }
  if (from.has_consensus_root()) {
    consensus_root_ = new ::consensuspb::ConsensusRoot(*from.consensus_root_);
  } else {
    consensus_root_ = NULL;
  }
  if (from.has_random()) {
    random_ = new ::corepb::Random(*from.random_);
  } else {
    random_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(alg_));
  // @@protoc_insertion_point(copy_constructor:corepb.BlockHeader)
}

void BlockHeader::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinbase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txs_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  events_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&consensus_root_, 0, reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&consensus_root_) + sizeof(alg_));
  _cached_size_ = 0;
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:corepb.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinbase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txs_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  events_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete consensus_root_;
  }
  if (this != internal_default_instance()) {
    delete random_;
  }
}

void BlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockHeader::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[4].descriptor;
}

const BlockHeader& BlockHeader::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockHeader* BlockHeader::New(::google::protobuf::Arena* arena) const {
  BlockHeader* n = new BlockHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.BlockHeader)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coinbase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txs_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  events_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && consensus_root_ != NULL) {
    delete consensus_root_;
  }
  consensus_root_ = NULL;
  if (GetArenaNoVirtual() == NULL && random_ != NULL) {
    delete random_;
  }
  random_ = NULL;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&alg_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(alg_));
}

bool BlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.BlockHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes parent_hash = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parent_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes coinbase = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_coinbase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 chain_id = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 alg = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sign = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes state_root = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_state_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes txs_root = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txs_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes events_root = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_events_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .consensuspb.ConsensusRoot consensus_root = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .corepb.Random random = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.BlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.BlockHeader)
  return false;
#undef DO_
}

void BlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.BlockHeader)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // bytes parent_hash = 2;
  if (this->parent_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->parent_hash(), output);
  }

  // bytes coinbase = 4;
  if (this->coinbase().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->coinbase(), output);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // uint32 chain_id = 6;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->chain_id(), output);
  }

  // uint32 alg = 7;
  if (this->alg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->alg(), output);
  }

  // bytes sign = 8;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sign(), output);
  }

  // bytes state_root = 9;
  if (this->state_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->state_root(), output);
  }

  // bytes txs_root = 10;
  if (this->txs_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->txs_root(), output);
  }

  // bytes events_root = 11;
  if (this->events_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->events_root(), output);
  }

  // .consensuspb.ConsensusRoot consensus_root = 12;
  if (this->has_consensus_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->consensus_root_, output);
  }

  // .corepb.Random random = 13;
  if (this->has_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->random_, output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.BlockHeader)
}

::google::protobuf::uint8* BlockHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.BlockHeader)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // bytes parent_hash = 2;
  if (this->parent_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->parent_hash(), target);
  }

  // bytes coinbase = 4;
  if (this->coinbase().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->coinbase(), target);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // uint32 chain_id = 6;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->chain_id(), target);
  }

  // uint32 alg = 7;
  if (this->alg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->alg(), target);
  }

  // bytes sign = 8;
  if (this->sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sign(), target);
  }

  // bytes state_root = 9;
  if (this->state_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->state_root(), target);
  }

  // bytes txs_root = 10;
  if (this->txs_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->txs_root(), target);
  }

  // bytes events_root = 11;
  if (this->events_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->events_root(), target);
  }

  // .consensuspb.ConsensusRoot consensus_root = 12;
  if (this->has_consensus_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->consensus_root_, false, target);
  }

  // .corepb.Random random = 13;
  if (this->has_random()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->random_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.BlockHeader)
  size_t total_size = 0;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes parent_hash = 2;
  if (this->parent_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->parent_hash());
  }

  // bytes coinbase = 4;
  if (this->coinbase().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->coinbase());
  }

  // bytes sign = 8;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());
  }

  // bytes state_root = 9;
  if (this->state_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->state_root());
  }

  // bytes txs_root = 10;
  if (this->txs_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->txs_root());
  }

  // bytes events_root = 11;
  if (this->events_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->events_root());
  }

  // .consensuspb.ConsensusRoot consensus_root = 12;
  if (this->has_consensus_root()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_root_);
  }

  // .corepb.Random random = 13;
  if (this->has_random()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->random_);
  }

  // int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // uint32 chain_id = 6;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chain_id());
  }

  // uint32 alg = 7;
  if (this->alg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.BlockHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.parent_hash().size() > 0) {

    parent_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_hash_);
  }
  if (from.coinbase().size() > 0) {

    coinbase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coinbase_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.state_root().size() > 0) {

    state_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_root_);
  }
  if (from.txs_root().size() > 0) {

    txs_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.txs_root_);
  }
  if (from.events_root().size() > 0) {

    events_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.events_root_);
  }
  if (from.has_consensus_root()) {
    mutable_consensus_root()->::consensuspb::ConsensusRoot::MergeFrom(from.consensus_root());
  }
  if (from.has_random()) {
    mutable_random()->::corepb::Random::MergeFrom(from.random());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
  if (from.alg() != 0) {
    set_alg(from.alg());
  }
}

void BlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::Swap(BlockHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockHeader::InternalSwap(BlockHeader* other) {
  hash_.Swap(&other->hash_);
  parent_hash_.Swap(&other->parent_hash_);
  coinbase_.Swap(&other->coinbase_);
  sign_.Swap(&other->sign_);
  state_root_.Swap(&other->state_root_);
  txs_root_.Swap(&other->txs_root_);
  events_root_.Swap(&other->events_root_);
  std::swap(consensus_root_, other->consensus_root_);
  std::swap(random_, other->random_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(chain_id_, other->chain_id_);
  std::swap(alg_, other->alg_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockHeader::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockHeader

// bytes hash = 1;
void BlockHeader::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.hash)
  return hash_.GetNoArena();
}
void BlockHeader::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.hash)
}
#if LANG_CXX11
void BlockHeader::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.hash)
}
#endif
void BlockHeader::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.hash)
}
void BlockHeader::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.hash)
}
::std::string* BlockHeader::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.hash)
}

// bytes parent_hash = 2;
void BlockHeader::clear_parent_hash() {
  parent_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::parent_hash() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.parent_hash)
  return parent_hash_.GetNoArena();
}
void BlockHeader::set_parent_hash(const ::std::string& value) {
  
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.parent_hash)
}
#if LANG_CXX11
void BlockHeader::set_parent_hash(::std::string&& value) {
  
  parent_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.parent_hash)
}
#endif
void BlockHeader::set_parent_hash(const char* value) {
  
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.parent_hash)
}
void BlockHeader::set_parent_hash(const void* value, size_t size) {
  
  parent_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.parent_hash)
}
::std::string* BlockHeader::mutable_parent_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.parent_hash)
  return parent_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_parent_hash() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.parent_hash)
  
  return parent_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_parent_hash(::std::string* parent_hash) {
  if (parent_hash != NULL) {
    
  } else {
    
  }
  parent_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.parent_hash)
}

// bytes coinbase = 4;
void BlockHeader::clear_coinbase() {
  coinbase_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::coinbase() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.coinbase)
  return coinbase_.GetNoArena();
}
void BlockHeader::set_coinbase(const ::std::string& value) {
  
  coinbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.coinbase)
}
#if LANG_CXX11
void BlockHeader::set_coinbase(::std::string&& value) {
  
  coinbase_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.coinbase)
}
#endif
void BlockHeader::set_coinbase(const char* value) {
  
  coinbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.coinbase)
}
void BlockHeader::set_coinbase(const void* value, size_t size) {
  
  coinbase_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.coinbase)
}
::std::string* BlockHeader::mutable_coinbase() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.coinbase)
  return coinbase_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_coinbase() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.coinbase)
  
  return coinbase_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_coinbase(::std::string* coinbase) {
  if (coinbase != NULL) {
    
  } else {
    
  }
  coinbase_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coinbase);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.coinbase)
}

// int64 timestamp = 5;
void BlockHeader::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.timestamp)
  return timestamp_;
}
void BlockHeader::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.timestamp)
}

// uint32 chain_id = 6;
void BlockHeader::clear_chain_id() {
  chain_id_ = 0u;
}
::google::protobuf::uint32 BlockHeader::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.chain_id)
  return chain_id_;
}
void BlockHeader::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.chain_id)
}

// uint32 alg = 7;
void BlockHeader::clear_alg() {
  alg_ = 0u;
}
::google::protobuf::uint32 BlockHeader::alg() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.alg)
  return alg_;
}
void BlockHeader::set_alg(::google::protobuf::uint32 value) {
  
  alg_ = value;
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.alg)
}

// bytes sign = 8;
void BlockHeader::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::sign() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.sign)
  return sign_.GetNoArena();
}
void BlockHeader::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.sign)
}
#if LANG_CXX11
void BlockHeader::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.sign)
}
#endif
void BlockHeader::set_sign(const char* value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.sign)
}
void BlockHeader::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.sign)
}
::std::string* BlockHeader::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.sign)
}

// bytes state_root = 9;
void BlockHeader::clear_state_root() {
  state_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::state_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.state_root)
  return state_root_.GetNoArena();
}
void BlockHeader::set_state_root(const ::std::string& value) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.state_root)
}
#if LANG_CXX11
void BlockHeader::set_state_root(::std::string&& value) {
  
  state_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.state_root)
}
#endif
void BlockHeader::set_state_root(const char* value) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.state_root)
}
void BlockHeader::set_state_root(const void* value, size_t size) {
  
  state_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.state_root)
}
::std::string* BlockHeader::mutable_state_root() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.state_root)
  return state_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_state_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.state_root)
  
  return state_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_state_root(::std::string* state_root) {
  if (state_root != NULL) {
    
  } else {
    
  }
  state_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state_root);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.state_root)
}

// bytes txs_root = 10;
void BlockHeader::clear_txs_root() {
  txs_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::txs_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.txs_root)
  return txs_root_.GetNoArena();
}
void BlockHeader::set_txs_root(const ::std::string& value) {
  
  txs_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.txs_root)
}
#if LANG_CXX11
void BlockHeader::set_txs_root(::std::string&& value) {
  
  txs_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.txs_root)
}
#endif
void BlockHeader::set_txs_root(const char* value) {
  
  txs_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.txs_root)
}
void BlockHeader::set_txs_root(const void* value, size_t size) {
  
  txs_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.txs_root)
}
::std::string* BlockHeader::mutable_txs_root() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.txs_root)
  return txs_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_txs_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.txs_root)
  
  return txs_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_txs_root(::std::string* txs_root) {
  if (txs_root != NULL) {
    
  } else {
    
  }
  txs_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txs_root);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.txs_root)
}

// bytes events_root = 11;
void BlockHeader::clear_events_root() {
  events_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BlockHeader::events_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.events_root)
  return events_root_.GetNoArena();
}
void BlockHeader::set_events_root(const ::std::string& value) {
  
  events_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.BlockHeader.events_root)
}
#if LANG_CXX11
void BlockHeader::set_events_root(::std::string&& value) {
  
  events_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.BlockHeader.events_root)
}
#endif
void BlockHeader::set_events_root(const char* value) {
  
  events_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.BlockHeader.events_root)
}
void BlockHeader::set_events_root(const void* value, size_t size) {
  
  events_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.BlockHeader.events_root)
}
::std::string* BlockHeader::mutable_events_root() {
  
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.events_root)
  return events_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockHeader::release_events_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.events_root)
  
  return events_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockHeader::set_allocated_events_root(::std::string* events_root) {
  if (events_root != NULL) {
    
  } else {
    
  }
  events_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), events_root);
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.events_root)
}

// .consensuspb.ConsensusRoot consensus_root = 12;
bool BlockHeader::has_consensus_root() const {
  return this != internal_default_instance() && consensus_root_ != NULL;
}
void BlockHeader::clear_consensus_root() {
  if (GetArenaNoVirtual() == NULL && consensus_root_ != NULL) delete consensus_root_;
  consensus_root_ = NULL;
}
const ::consensuspb::ConsensusRoot& BlockHeader::consensus_root() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.consensus_root)
  return consensus_root_ != NULL ? *consensus_root_
                         : *::consensuspb::ConsensusRoot::internal_default_instance();
}
::consensuspb::ConsensusRoot* BlockHeader::mutable_consensus_root() {
  
  if (consensus_root_ == NULL) {
    consensus_root_ = new ::consensuspb::ConsensusRoot;
  }
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.consensus_root)
  return consensus_root_;
}
::consensuspb::ConsensusRoot* BlockHeader::release_consensus_root() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.consensus_root)
  
  ::consensuspb::ConsensusRoot* temp = consensus_root_;
  consensus_root_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_consensus_root(::consensuspb::ConsensusRoot* consensus_root) {
  delete consensus_root_;
  consensus_root_ = consensus_root;
  if (consensus_root) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.consensus_root)
}

// .corepb.Random random = 13;
bool BlockHeader::has_random() const {
  return this != internal_default_instance() && random_ != NULL;
}
void BlockHeader::clear_random() {
  if (GetArenaNoVirtual() == NULL && random_ != NULL) delete random_;
  random_ = NULL;
}
const ::corepb::Random& BlockHeader::random() const {
  // @@protoc_insertion_point(field_get:corepb.BlockHeader.random)
  return random_ != NULL ? *random_
                         : *::corepb::Random::internal_default_instance();
}
::corepb::Random* BlockHeader::mutable_random() {
  
  if (random_ == NULL) {
    random_ = new ::corepb::Random;
  }
  // @@protoc_insertion_point(field_mutable:corepb.BlockHeader.random)
  return random_;
}
::corepb::Random* BlockHeader::release_random() {
  // @@protoc_insertion_point(field_release:corepb.BlockHeader.random)
  
  ::corepb::Random* temp = random_;
  random_ = NULL;
  return temp;
}
void BlockHeader::set_allocated_random(::corepb::Random* random) {
  delete random_;
  random_ = random;
  if (random) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.BlockHeader.random)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Block::kHeaderFieldNumber;
const int Block::kTransactionsFieldNumber;
const int Block::kDependencyFieldNumber;
const int Block::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Block::Block()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Block)
}
Block::Block(const Block& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transactions_(from.transactions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::corepb::BlockHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_dependency()) {
    dependency_ = new ::dagpb::Dag(*from.dependency_);
  } else {
    dependency_ = NULL;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:corepb.Block)
}

void Block::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&header_) + sizeof(height_));
  _cached_size_ = 0;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:corepb.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete dependency_;
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[5].descriptor;
}

const Block& Block::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

Block* Block::New(::google::protobuf::Arena* arena) const {
  Block* n = new Block;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Block)
  transactions_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && dependency_ != NULL) {
    delete dependency_;
  }
  dependency_ = NULL;
  height_ = GOOGLE_ULONGLONG(0);
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Block)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .corepb.BlockHeader header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .corepb.Transaction transactions = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .dagpb.Dag dependency = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dependency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Block)
  return false;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Block)
  // .corepb.BlockHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .corepb.Transaction transactions = 2;
  for (unsigned int i = 0, n = this->transactions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transactions(i), output);
  }

  // .dagpb.Dag dependency = 3;
  if (this->has_dependency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dependency_, output);
  }

  // uint64 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Block)
}

::google::protobuf::uint8* Block::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Block)
  // .corepb.BlockHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .corepb.Transaction transactions = 2;
  for (unsigned int i = 0, n = this->transactions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->transactions(i), false, target);
  }

  // .dagpb.Dag dependency = 3;
  if (this->has_dependency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->dependency_, false, target);
  }

  // uint64 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Block)
  size_t total_size = 0;

  // repeated .corepb.Transaction transactions = 2;
  {
    unsigned int count = this->transactions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transactions(i));
    }
  }

  // .corepb.BlockHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .dagpb.Dag dependency = 3;
  if (this->has_dependency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dependency_);
  }

  // uint64 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Block>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Block)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactions_.MergeFrom(from.transactions_);
  if (from.has_header()) {
    mutable_header()->::corepb::BlockHeader::MergeFrom(from.header());
  }
  if (from.has_dependency()) {
    mutable_dependency()->::dagpb::Dag::MergeFrom(from.dependency());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::Swap(Block* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Block::InternalSwap(Block* other) {
  transactions_.UnsafeArenaSwap(&other->transactions_);
  std::swap(header_, other->header_);
  std::swap(dependency_, other->dependency_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Block

// .corepb.BlockHeader header = 1;
bool Block::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Block::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::corepb::BlockHeader& Block::header() const {
  // @@protoc_insertion_point(field_get:corepb.Block.header)
  return header_ != NULL ? *header_
                         : *::corepb::BlockHeader::internal_default_instance();
}
::corepb::BlockHeader* Block::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::corepb::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Block.header)
  return header_;
}
::corepb::BlockHeader* Block::release_header() {
  // @@protoc_insertion_point(field_release:corepb.Block.header)
  
  ::corepb::BlockHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void Block::set_allocated_header(::corepb::BlockHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Block.header)
}

// repeated .corepb.Transaction transactions = 2;
int Block::transactions_size() const {
  return transactions_.size();
}
void Block::clear_transactions() {
  transactions_.Clear();
}
const ::corepb::Transaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:corepb.Block.transactions)
  return transactions_.Get(index);
}
::corepb::Transaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.Block.transactions)
  return transactions_.Mutable(index);
}
::corepb::Transaction* Block::add_transactions() {
  // @@protoc_insertion_point(field_add:corepb.Block.transactions)
  return transactions_.Add();
}
::google::protobuf::RepeatedPtrField< ::corepb::Transaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:corepb.Block.transactions)
  return &transactions_;
}
const ::google::protobuf::RepeatedPtrField< ::corepb::Transaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:corepb.Block.transactions)
  return transactions_;
}

// .dagpb.Dag dependency = 3;
bool Block::has_dependency() const {
  return this != internal_default_instance() && dependency_ != NULL;
}
void Block::clear_dependency() {
  if (GetArenaNoVirtual() == NULL && dependency_ != NULL) delete dependency_;
  dependency_ = NULL;
}
const ::dagpb::Dag& Block::dependency() const {
  // @@protoc_insertion_point(field_get:corepb.Block.dependency)
  return dependency_ != NULL ? *dependency_
                         : *::dagpb::Dag::internal_default_instance();
}
::dagpb::Dag* Block::mutable_dependency() {
  
  if (dependency_ == NULL) {
    dependency_ = new ::dagpb::Dag;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Block.dependency)
  return dependency_;
}
::dagpb::Dag* Block::release_dependency() {
  // @@protoc_insertion_point(field_release:corepb.Block.dependency)
  
  ::dagpb::Dag* temp = dependency_;
  dependency_ = NULL;
  return temp;
}
void Block::set_allocated_dependency(::dagpb::Dag* dependency) {
  delete dependency_;
  dependency_ = dependency;
  if (dependency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Block.dependency)
}

// uint64 height = 4;
void Block::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Block::height() const {
  // @@protoc_insertion_point(field_get:corepb.Block.height)
  return height_;
}
void Block::set_height(::google::protobuf::uint64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:corepb.Block.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetBlocks::kFromFieldNumber;
const int NetBlocks::kBatchFieldNumber;
const int NetBlocks::kBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetBlocks::NetBlocks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.NetBlocks)
}
NetBlocks::NetBlocks(const NetBlocks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      blocks_(from.blocks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  batch_ = from.batch_;
  // @@protoc_insertion_point(copy_constructor:corepb.NetBlocks)
}

void NetBlocks::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

NetBlocks::~NetBlocks() {
  // @@protoc_insertion_point(destructor:corepb.NetBlocks)
  SharedDtor();
}

void NetBlocks::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetBlocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetBlocks::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[6].descriptor;
}

const NetBlocks& NetBlocks::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetBlocks* NetBlocks::New(::google::protobuf::Arena* arena) const {
  NetBlocks* n = new NetBlocks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetBlocks::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.NetBlocks)
  blocks_.Clear();
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_ = GOOGLE_ULONGLONG(0);
}

bool NetBlocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.NetBlocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.NetBlocks.from"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 batch = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .corepb.Block blocks = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.NetBlocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.NetBlocks)
  return false;
#undef DO_
}

void NetBlocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.NetBlocks)
  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.NetBlocks.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // uint64 batch = 2;
  if (this->batch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->batch(), output);
  }

  // repeated .corepb.Block blocks = 3;
  for (unsigned int i = 0, n = this->blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blocks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.NetBlocks)
}

::google::protobuf::uint8* NetBlocks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.NetBlocks)
  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.NetBlocks.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // uint64 batch = 2;
  if (this->batch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->batch(), target);
  }

  // repeated .corepb.Block blocks = 3;
  for (unsigned int i = 0, n = this->blocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->blocks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.NetBlocks)
  return target;
}

size_t NetBlocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.NetBlocks)
  size_t total_size = 0;

  // repeated .corepb.Block blocks = 3;
  {
    unsigned int count = this->blocks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks(i));
    }
  }

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // uint64 batch = 2;
  if (this->batch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->batch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetBlocks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.NetBlocks)
  GOOGLE_DCHECK_NE(&from, this);
  const NetBlocks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetBlocks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.NetBlocks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.NetBlocks)
    MergeFrom(*source);
  }
}

void NetBlocks::MergeFrom(const NetBlocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.NetBlocks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blocks_.MergeFrom(from.blocks_);
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.batch() != 0) {
    set_batch(from.batch());
  }
}

void NetBlocks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.NetBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetBlocks::CopyFrom(const NetBlocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.NetBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetBlocks::IsInitialized() const {
  return true;
}

void NetBlocks::Swap(NetBlocks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetBlocks::InternalSwap(NetBlocks* other) {
  blocks_.UnsafeArenaSwap(&other->blocks_);
  from_.Swap(&other->from_);
  std::swap(batch_, other->batch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetBlocks::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetBlocks

// string from = 1;
void NetBlocks::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetBlocks::from() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlocks.from)
  return from_.GetNoArena();
}
void NetBlocks::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.NetBlocks.from)
}
#if LANG_CXX11
void NetBlocks::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.NetBlocks.from)
}
#endif
void NetBlocks::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.NetBlocks.from)
}
void NetBlocks::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.NetBlocks.from)
}
::std::string* NetBlocks::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:corepb.NetBlocks.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetBlocks::release_from() {
  // @@protoc_insertion_point(field_release:corepb.NetBlocks.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetBlocks::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:corepb.NetBlocks.from)
}

// uint64 batch = 2;
void NetBlocks::clear_batch() {
  batch_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetBlocks::batch() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlocks.batch)
  return batch_;
}
void NetBlocks::set_batch(::google::protobuf::uint64 value) {
  
  batch_ = value;
  // @@protoc_insertion_point(field_set:corepb.NetBlocks.batch)
}

// repeated .corepb.Block blocks = 3;
int NetBlocks::blocks_size() const {
  return blocks_.size();
}
void NetBlocks::clear_blocks() {
  blocks_.Clear();
}
const ::corepb::Block& NetBlocks::blocks(int index) const {
  // @@protoc_insertion_point(field_get:corepb.NetBlocks.blocks)
  return blocks_.Get(index);
}
::corepb::Block* NetBlocks::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.NetBlocks.blocks)
  return blocks_.Mutable(index);
}
::corepb::Block* NetBlocks::add_blocks() {
  // @@protoc_insertion_point(field_add:corepb.NetBlocks.blocks)
  return blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::corepb::Block >*
NetBlocks::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:corepb.NetBlocks.blocks)
  return &blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::corepb::Block >&
NetBlocks::blocks() const {
  // @@protoc_insertion_point(field_list:corepb.NetBlocks.blocks)
  return blocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetBlock::kFromFieldNumber;
const int NetBlock::kBatchFieldNumber;
const int NetBlock::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetBlock::NetBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.NetBlock)
}
NetBlock::NetBlock(const NetBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.has_block()) {
    block_ = new ::corepb::Block(*from.block_);
  } else {
    block_ = NULL;
  }
  batch_ = from.batch_;
  // @@protoc_insertion_point(copy_constructor:corepb.NetBlock)
}

void NetBlock::SharedCtor() {
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_, 0, reinterpret_cast<char*>(&batch_) -
    reinterpret_cast<char*>(&block_) + sizeof(batch_));
  _cached_size_ = 0;
}

NetBlock::~NetBlock() {
  // @@protoc_insertion_point(destructor:corepb.NetBlock)
  SharedDtor();
}

void NetBlock::SharedDtor() {
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete block_;
  }
}

void NetBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetBlock::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[7].descriptor;
}

const NetBlock& NetBlock::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetBlock* NetBlock::New(::google::protobuf::Arena* arena) const {
  NetBlock* n = new NetBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.NetBlock)
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && block_ != NULL) {
    delete block_;
  }
  block_ = NULL;
  batch_ = GOOGLE_ULONGLONG(0);
}

bool NetBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.NetBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.NetBlock.from"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 batch = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &batch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .corepb.Block block = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.NetBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.NetBlock)
  return false;
#undef DO_
}

void NetBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.NetBlock)
  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.NetBlock.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from(), output);
  }

  // uint64 batch = 2;
  if (this->batch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->batch(), output);
  }

  // .corepb.Block block = 3;
  if (this->has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->block_, output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.NetBlock)
}

::google::protobuf::uint8* NetBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.NetBlock)
  // string from = 1;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.NetBlock.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }

  // uint64 batch = 2;
  if (this->batch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->batch(), target);
  }

  // .corepb.Block block = 3;
  if (this->has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->block_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.NetBlock)
  return target;
}

size_t NetBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.NetBlock)
  size_t total_size = 0;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // .corepb.Block block = 3;
  if (this->has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_);
  }

  // uint64 batch = 2;
  if (this->batch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->batch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.NetBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const NetBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.NetBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.NetBlock)
    MergeFrom(*source);
  }
}

void NetBlock::MergeFrom(const NetBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.NetBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.has_block()) {
    mutable_block()->::corepb::Block::MergeFrom(from.block());
  }
  if (from.batch() != 0) {
    set_batch(from.batch());
  }
}

void NetBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.NetBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetBlock::CopyFrom(const NetBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.NetBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetBlock::IsInitialized() const {
  return true;
}

void NetBlock::Swap(NetBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetBlock::InternalSwap(NetBlock* other) {
  from_.Swap(&other->from_);
  std::swap(block_, other->block_);
  std::swap(batch_, other->batch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetBlock::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetBlock

// string from = 1;
void NetBlock::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetBlock::from() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlock.from)
  return from_.GetNoArena();
}
void NetBlock::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.NetBlock.from)
}
#if LANG_CXX11
void NetBlock::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.NetBlock.from)
}
#endif
void NetBlock::set_from(const char* value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.NetBlock.from)
}
void NetBlock::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.NetBlock.from)
}
::std::string* NetBlock::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:corepb.NetBlock.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetBlock::release_from() {
  // @@protoc_insertion_point(field_release:corepb.NetBlock.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetBlock::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:corepb.NetBlock.from)
}

// uint64 batch = 2;
void NetBlock::clear_batch() {
  batch_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetBlock::batch() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlock.batch)
  return batch_;
}
void NetBlock::set_batch(::google::protobuf::uint64 value) {
  
  batch_ = value;
  // @@protoc_insertion_point(field_set:corepb.NetBlock.batch)
}

// .corepb.Block block = 3;
bool NetBlock::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
void NetBlock::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
}
const ::corepb::Block& NetBlock::block() const {
  // @@protoc_insertion_point(field_get:corepb.NetBlock.block)
  return block_ != NULL ? *block_
                         : *::corepb::Block::internal_default_instance();
}
::corepb::Block* NetBlock::mutable_block() {
  
  if (block_ == NULL) {
    block_ = new ::corepb::Block;
  }
  // @@protoc_insertion_point(field_mutable:corepb.NetBlock.block)
  return block_;
}
::corepb::Block* NetBlock::release_block() {
  // @@protoc_insertion_point(field_release:corepb.NetBlock.block)
  
  ::corepb::Block* temp = block_;
  block_ = NULL;
  return temp;
}
void NetBlock::set_allocated_block(::corepb::Block* block) {
  delete block_;
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.NetBlock.block)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadBlock::kHashFieldNumber;
const int DownloadBlock::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadBlock::DownloadBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.DownloadBlock)
}
DownloadBlock::DownloadBlock(const DownloadBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  // @@protoc_insertion_point(copy_constructor:corepb.DownloadBlock)
}

void DownloadBlock::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DownloadBlock::~DownloadBlock() {
  // @@protoc_insertion_point(destructor:corepb.DownloadBlock)
  SharedDtor();
}

void DownloadBlock::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadBlock::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[8].descriptor;
}

const DownloadBlock& DownloadBlock::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadBlock* DownloadBlock::New(::google::protobuf::Arena* arena) const {
  DownloadBlock* n = new DownloadBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.DownloadBlock)
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DownloadBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.DownloadBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sign = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.DownloadBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.DownloadBlock)
  return false;
#undef DO_
}

void DownloadBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.DownloadBlock)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // bytes sign = 2;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sign(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.DownloadBlock)
}

::google::protobuf::uint8* DownloadBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.DownloadBlock)
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // bytes sign = 2;
  if (this->sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sign(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.DownloadBlock)
  return target;
}

size_t DownloadBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.DownloadBlock)
  size_t total_size = 0;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes sign = 2;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sign());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.DownloadBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.DownloadBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.DownloadBlock)
    MergeFrom(*source);
  }
}

void DownloadBlock::MergeFrom(const DownloadBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.DownloadBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
}

void DownloadBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.DownloadBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadBlock::CopyFrom(const DownloadBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.DownloadBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadBlock::IsInitialized() const {
  return true;
}

void DownloadBlock::Swap(DownloadBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadBlock::InternalSwap(DownloadBlock* other) {
  hash_.Swap(&other->hash_);
  sign_.Swap(&other->sign_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadBlock::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadBlock

// bytes hash = 1;
void DownloadBlock::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DownloadBlock::hash() const {
  // @@protoc_insertion_point(field_get:corepb.DownloadBlock.hash)
  return hash_.GetNoArena();
}
void DownloadBlock::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.DownloadBlock.hash)
}
#if LANG_CXX11
void DownloadBlock::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.DownloadBlock.hash)
}
#endif
void DownloadBlock::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.DownloadBlock.hash)
}
void DownloadBlock::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.DownloadBlock.hash)
}
::std::string* DownloadBlock::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:corepb.DownloadBlock.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadBlock::release_hash() {
  // @@protoc_insertion_point(field_release:corepb.DownloadBlock.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadBlock::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:corepb.DownloadBlock.hash)
}

// bytes sign = 2;
void DownloadBlock::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DownloadBlock::sign() const {
  // @@protoc_insertion_point(field_get:corepb.DownloadBlock.sign)
  return sign_.GetNoArena();
}
void DownloadBlock::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.DownloadBlock.sign)
}
#if LANG_CXX11
void DownloadBlock::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.DownloadBlock.sign)
}
#endif
void DownloadBlock::set_sign(const char* value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.DownloadBlock.sign)
}
void DownloadBlock::set_sign(const void* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.DownloadBlock.sign)
}
::std::string* DownloadBlock::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:corepb.DownloadBlock.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadBlock::release_sign() {
  // @@protoc_insertion_point(field_release:corepb.DownloadBlock.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadBlock::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:corepb.DownloadBlock.sign)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Random::kVrfSeedFieldNumber;
const int Random::kVrfProofFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Random::Random()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_block_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Random)
}
Random::Random(const Random& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vrf_seed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrf_seed().size() > 0) {
    vrf_seed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_seed_);
  }
  vrf_proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vrf_proof().size() > 0) {
    vrf_proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_proof_);
  }
  // @@protoc_insertion_point(copy_constructor:corepb.Random)
}

void Random::SharedCtor() {
  vrf_seed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vrf_proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Random::~Random() {
  // @@protoc_insertion_point(destructor:corepb.Random)
  SharedDtor();
}

void Random::SharedDtor() {
  vrf_seed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vrf_proof_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Random::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Random::descriptor() {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[9].descriptor;
}

const Random& Random::default_instance() {
  protobuf_block_2eproto::InitDefaults();
  return *internal_default_instance();
}

Random* Random::New(::google::protobuf::Arena* arena) const {
  Random* n = new Random;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Random::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Random)
  vrf_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vrf_proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Random::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Random)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes vrf_seed = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vrf_seed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes vrf_proof = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vrf_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Random)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Random)
  return false;
#undef DO_
}

void Random::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Random)
  // bytes vrf_seed = 1;
  if (this->vrf_seed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vrf_seed(), output);
  }

  // bytes vrf_proof = 2;
  if (this->vrf_proof().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vrf_proof(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Random)
}

::google::protobuf::uint8* Random::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Random)
  // bytes vrf_seed = 1;
  if (this->vrf_seed().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->vrf_seed(), target);
  }

  // bytes vrf_proof = 2;
  if (this->vrf_proof().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vrf_proof(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Random)
  return target;
}

size_t Random::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Random)
  size_t total_size = 0;

  // bytes vrf_seed = 1;
  if (this->vrf_seed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->vrf_seed());
  }

  // bytes vrf_proof = 2;
  if (this->vrf_proof().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->vrf_proof());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Random::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Random)
  GOOGLE_DCHECK_NE(&from, this);
  const Random* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Random>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Random)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Random)
    MergeFrom(*source);
  }
}

void Random::MergeFrom(const Random& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Random)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.vrf_seed().size() > 0) {

    vrf_seed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_seed_);
  }
  if (from.vrf_proof().size() > 0) {

    vrf_proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vrf_proof_);
  }
}

void Random::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Random)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Random::CopyFrom(const Random& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Random)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Random::IsInitialized() const {
  return true;
}

void Random::Swap(Random* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Random::InternalSwap(Random* other) {
  vrf_seed_.Swap(&other->vrf_seed_);
  vrf_proof_.Swap(&other->vrf_proof_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Random::GetMetadata() const {
  protobuf_block_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_block_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Random

// bytes vrf_seed = 1;
void Random::clear_vrf_seed() {
  vrf_seed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Random::vrf_seed() const {
  // @@protoc_insertion_point(field_get:corepb.Random.vrf_seed)
  return vrf_seed_.GetNoArena();
}
void Random::set_vrf_seed(const ::std::string& value) {
  
  vrf_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Random.vrf_seed)
}
#if LANG_CXX11
void Random::set_vrf_seed(::std::string&& value) {
  
  vrf_seed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Random.vrf_seed)
}
#endif
void Random::set_vrf_seed(const char* value) {
  
  vrf_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Random.vrf_seed)
}
void Random::set_vrf_seed(const void* value, size_t size) {
  
  vrf_seed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Random.vrf_seed)
}
::std::string* Random::mutable_vrf_seed() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Random.vrf_seed)
  return vrf_seed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Random::release_vrf_seed() {
  // @@protoc_insertion_point(field_release:corepb.Random.vrf_seed)
  
  return vrf_seed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Random::set_allocated_vrf_seed(::std::string* vrf_seed) {
  if (vrf_seed != NULL) {
    
  } else {
    
  }
  vrf_seed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_seed);
  // @@protoc_insertion_point(field_set_allocated:corepb.Random.vrf_seed)
}

// bytes vrf_proof = 2;
void Random::clear_vrf_proof() {
  vrf_proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Random::vrf_proof() const {
  // @@protoc_insertion_point(field_get:corepb.Random.vrf_proof)
  return vrf_proof_.GetNoArena();
}
void Random::set_vrf_proof(const ::std::string& value) {
  
  vrf_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.Random.vrf_proof)
}
#if LANG_CXX11
void Random::set_vrf_proof(::std::string&& value) {
  
  vrf_proof_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.Random.vrf_proof)
}
#endif
void Random::set_vrf_proof(const char* value) {
  
  vrf_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.Random.vrf_proof)
}
void Random::set_vrf_proof(const void* value, size_t size) {
  
  vrf_proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.Random.vrf_proof)
}
::std::string* Random::mutable_vrf_proof() {
  
  // @@protoc_insertion_point(field_mutable:corepb.Random.vrf_proof)
  return vrf_proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Random::release_vrf_proof() {
  // @@protoc_insertion_point(field_release:corepb.Random.vrf_proof)
  
  return vrf_proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Random::set_allocated_vrf_proof(::std::string* vrf_proof) {
  if (vrf_proof != NULL) {
    
  } else {
    
  }
  vrf_proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vrf_proof);
  // @@protoc_insertion_point(field_set_allocated:corepb.Random.vrf_proof)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)
