// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dag.proto

#ifndef PROTOBUF_dag_2eproto__INCLUDED
#define PROTOBUF_dag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace dagpb {
class Dag;
class DagDefaultTypeInternal;
extern DagDefaultTypeInternal _Dag_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
}  // namespace dagpb

namespace dagpb {

namespace protobuf_dag_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dag_2eproto

// ===================================================================

class Dag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dagpb.Dag) */ {
 public:
  Dag();
  virtual ~Dag();

  Dag(const Dag& from);

  inline Dag& operator=(const Dag& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dag& default_instance();

  static inline const Dag* internal_default_instance() {
    return reinterpret_cast<const Dag*>(
               &_Dag_default_instance_);
  }

  void Swap(Dag* other);

  // implements Message ----------------------------------------------

  inline Dag* New() const PROTOBUF_FINAL { return New(NULL); }

  Dag* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Dag& from);
  void MergeFrom(const Dag& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dagpb.Node Nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::dagpb::Node& nodes(int index) const;
  ::dagpb::Node* mutable_nodes(int index);
  ::dagpb::Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::dagpb::Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::dagpb::Node >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:dagpb.Dag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dagpb::Node > nodes_;
  mutable int _cached_size_;
  friend struct  protobuf_dag_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dagpb.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Children = 3;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 3;
  ::google::protobuf::int32 children(int index) const;
  void set_children(int index, ::google::protobuf::int32 value);
  void add_children(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      children() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_children();

  // string Key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int32 Index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dagpb.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > children_;
  mutable int _children_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 index_;
  mutable int _cached_size_;
  friend struct  protobuf_dag_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Dag

// repeated .dagpb.Node Nodes = 1;
inline int Dag::nodes_size() const {
  return nodes_.size();
}
inline void Dag::clear_nodes() {
  nodes_.Clear();
}
inline const ::dagpb::Node& Dag::nodes(int index) const {
  // @@protoc_insertion_point(field_get:dagpb.Dag.Nodes)
  return nodes_.Get(index);
}
inline ::dagpb::Node* Dag::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:dagpb.Dag.Nodes)
  return nodes_.Mutable(index);
}
inline ::dagpb::Node* Dag::add_nodes() {
  // @@protoc_insertion_point(field_add:dagpb.Dag.Nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dagpb::Node >*
Dag::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:dagpb.Dag.Nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dagpb::Node >&
Dag::nodes() const {
  // @@protoc_insertion_point(field_list:dagpb.Dag.Nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// Node

// string Key = 1;
inline void Node::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::key() const {
  // @@protoc_insertion_point(field_get:dagpb.Node.Key)
  return key_.GetNoArena();
}
inline void Node::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dagpb.Node.Key)
}
#if LANG_CXX11
inline void Node::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dagpb.Node.Key)
}
#endif
inline void Node::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dagpb.Node.Key)
}
inline void Node::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dagpb.Node.Key)
}
inline ::std::string* Node::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:dagpb.Node.Key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_key() {
  // @@protoc_insertion_point(field_release:dagpb.Node.Key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dagpb.Node.Key)
}

// int32 Index = 2;
inline void Node::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 Node::index() const {
  // @@protoc_insertion_point(field_get:dagpb.Node.Index)
  return index_;
}
inline void Node::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:dagpb.Node.Index)
}

// repeated int32 Children = 3;
inline int Node::children_size() const {
  return children_.size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline ::google::protobuf::int32 Node::children(int index) const {
  // @@protoc_insertion_point(field_get:dagpb.Node.Children)
  return children_.Get(index);
}
inline void Node::set_children(int index, ::google::protobuf::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:dagpb.Node.Children)
}
inline void Node::add_children(::google::protobuf::int32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:dagpb.Node.Children)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Node::children() const {
  // @@protoc_insertion_point(field_list:dagpb.Node.Children)
  return children_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:dagpb.Node.Children)
  return &children_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dagpb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dag_2eproto__INCLUDED
