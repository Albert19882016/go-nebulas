// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genesis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genesis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace corepb {
class GenesisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Genesis> {
} _Genesis_default_instance_;
class GenesisMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenesisMeta> {
} _GenesisMeta_default_instance_;
class GenesisConsensusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenesisConsensus> {
} _GenesisConsensus_default_instance_;
class GenesisConsensusDposDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenesisConsensusDpos> {
} _GenesisConsensusDpos_default_instance_;
class GenesisTokenDistributionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GenesisTokenDistribution> {
} _GenesisTokenDistribution_default_instance_;

namespace protobuf_genesis_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genesis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genesis, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genesis, consensus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genesis, token_distribution_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisMeta, chain_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisConsensus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisConsensus, dpos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisConsensusDpos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisConsensusDpos, dynasty_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisTokenDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisTokenDistribution, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenesisTokenDistribution, value_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Genesis)},
  { 7, -1, sizeof(GenesisMeta)},
  { 12, -1, sizeof(GenesisConsensus)},
  { 17, -1, sizeof(GenesisConsensusDpos)},
  { 22, -1, sizeof(GenesisTokenDistribution)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Genesis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenesisMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenesisConsensus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenesisConsensusDpos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GenesisTokenDistribution_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "genesis.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Genesis_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GenesisMeta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GenesisConsensus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GenesisConsensusDpos_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GenesisTokenDistribution_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Genesis_default_instance_.DefaultConstruct();
  _GenesisMeta_default_instance_.DefaultConstruct();
  _GenesisConsensus_default_instance_.DefaultConstruct();
  _GenesisConsensusDpos_default_instance_.DefaultConstruct();
  _GenesisTokenDistribution_default_instance_.DefaultConstruct();
  _Genesis_default_instance_.get_mutable()->meta_ = const_cast< ::corepb::GenesisMeta*>(
      ::corepb::GenesisMeta::internal_default_instance());
  _Genesis_default_instance_.get_mutable()->consensus_ = const_cast< ::corepb::GenesisConsensus*>(
      ::corepb::GenesisConsensus::internal_default_instance());
  _GenesisConsensus_default_instance_.get_mutable()->dpos_ = const_cast< ::corepb::GenesisConsensusDpos*>(
      ::corepb::GenesisConsensusDpos::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rgenesis.proto\022\006corepb\"\227\001\n\007Genesis\022!\n\004m"
      "eta\030\001 \001(\0132\023.corepb.GenesisMeta\022+\n\tconsen"
      "sus\030\002 \001(\0132\030.corepb.GenesisConsensus\022<\n\022t"
      "oken_distribution\030\003 \003(\0132 .corepb.Genesis"
      "TokenDistribution\"\037\n\013GenesisMeta\022\020\n\010chai"
      "n_id\030\001 \001(\r\">\n\020GenesisConsensus\022*\n\004dpos\030\001"
      " \001(\0132\034.corepb.GenesisConsensusDpos\"\'\n\024Ge"
      "nesisConsensusDpos\022\017\n\007dynasty\030\001 \003(\t\":\n\030G"
      "enesisTokenDistribution\022\017\n\007address\030\001 \001(\t"
      "\022\r\n\005value\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genesis.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_genesis_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Genesis::kMetaFieldNumber;
const int Genesis::kConsensusFieldNumber;
const int Genesis::kTokenDistributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Genesis::Genesis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genesis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Genesis)
}
Genesis::Genesis(const Genesis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      token_distribution_(from.token_distribution_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::corepb::GenesisMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  if (from.has_consensus()) {
    consensus_ = new ::corepb::GenesisConsensus(*from.consensus_);
  } else {
    consensus_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:corepb.Genesis)
}

void Genesis::SharedCtor() {
  ::memset(&meta_, 0, reinterpret_cast<char*>(&consensus_) -
    reinterpret_cast<char*>(&meta_) + sizeof(consensus_));
  _cached_size_ = 0;
}

Genesis::~Genesis() {
  // @@protoc_insertion_point(destructor:corepb.Genesis)
  SharedDtor();
}

void Genesis::SharedDtor() {
  if (this != internal_default_instance()) {
    delete meta_;
  }
  if (this != internal_default_instance()) {
    delete consensus_;
  }
}

void Genesis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Genesis::descriptor() {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[0].descriptor;
}

const Genesis& Genesis::default_instance() {
  protobuf_genesis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Genesis* Genesis::New(::google::protobuf::Arena* arena) const {
  Genesis* n = new Genesis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Genesis::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Genesis)
  token_distribution_.Clear();
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && consensus_ != NULL) {
    delete consensus_;
  }
  consensus_ = NULL;
}

bool Genesis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Genesis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .corepb.GenesisMeta meta = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .corepb.GenesisConsensus consensus = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_consensus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_token_distribution()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Genesis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Genesis)
  return false;
#undef DO_
}

void Genesis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Genesis)
  // .corepb.GenesisMeta meta = 1;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_, output);
  }

  // .corepb.GenesisConsensus consensus = 2;
  if (this->has_consensus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->consensus_, output);
  }

  // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
  for (unsigned int i = 0, n = this->token_distribution_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->token_distribution(i), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Genesis)
}

::google::protobuf::uint8* Genesis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Genesis)
  // .corepb.GenesisMeta meta = 1;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->meta_, false, target);
  }

  // .corepb.GenesisConsensus consensus = 2;
  if (this->has_consensus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->consensus_, false, target);
  }

  // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
  for (unsigned int i = 0, n = this->token_distribution_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->token_distribution(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Genesis)
  return target;
}

size_t Genesis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Genesis)
  size_t total_size = 0;

  // repeated .corepb.GenesisTokenDistribution token_distribution = 3;
  {
    unsigned int count = this->token_distribution_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token_distribution(i));
    }
  }

  // .corepb.GenesisMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  // .corepb.GenesisConsensus consensus = 2;
  if (this->has_consensus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->consensus_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Genesis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Genesis)
  GOOGLE_DCHECK_NE(&from, this);
  const Genesis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Genesis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Genesis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Genesis)
    MergeFrom(*source);
  }
}

void Genesis::MergeFrom(const Genesis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Genesis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_distribution_.MergeFrom(from.token_distribution_);
  if (from.has_meta()) {
    mutable_meta()->::corepb::GenesisMeta::MergeFrom(from.meta());
  }
  if (from.has_consensus()) {
    mutable_consensus()->::corepb::GenesisConsensus::MergeFrom(from.consensus());
  }
}

void Genesis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Genesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genesis::CopyFrom(const Genesis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Genesis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genesis::IsInitialized() const {
  return true;
}

void Genesis::Swap(Genesis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Genesis::InternalSwap(Genesis* other) {
  token_distribution_.UnsafeArenaSwap(&other->token_distribution_);
  std::swap(meta_, other->meta_);
  std::swap(consensus_, other->consensus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Genesis::GetMetadata() const {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Genesis

// .corepb.GenesisMeta meta = 1;
bool Genesis::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void Genesis::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::corepb::GenesisMeta& Genesis::meta() const {
  // @@protoc_insertion_point(field_get:corepb.Genesis.meta)
  return meta_ != NULL ? *meta_
                         : *::corepb::GenesisMeta::internal_default_instance();
}
::corepb::GenesisMeta* Genesis::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::corepb::GenesisMeta;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Genesis.meta)
  return meta_;
}
::corepb::GenesisMeta* Genesis::release_meta() {
  // @@protoc_insertion_point(field_release:corepb.Genesis.meta)
  
  ::corepb::GenesisMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Genesis::set_allocated_meta(::corepb::GenesisMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Genesis.meta)
}

// .corepb.GenesisConsensus consensus = 2;
bool Genesis::has_consensus() const {
  return this != internal_default_instance() && consensus_ != NULL;
}
void Genesis::clear_consensus() {
  if (GetArenaNoVirtual() == NULL && consensus_ != NULL) delete consensus_;
  consensus_ = NULL;
}
const ::corepb::GenesisConsensus& Genesis::consensus() const {
  // @@protoc_insertion_point(field_get:corepb.Genesis.consensus)
  return consensus_ != NULL ? *consensus_
                         : *::corepb::GenesisConsensus::internal_default_instance();
}
::corepb::GenesisConsensus* Genesis::mutable_consensus() {
  
  if (consensus_ == NULL) {
    consensus_ = new ::corepb::GenesisConsensus;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Genesis.consensus)
  return consensus_;
}
::corepb::GenesisConsensus* Genesis::release_consensus() {
  // @@protoc_insertion_point(field_release:corepb.Genesis.consensus)
  
  ::corepb::GenesisConsensus* temp = consensus_;
  consensus_ = NULL;
  return temp;
}
void Genesis::set_allocated_consensus(::corepb::GenesisConsensus* consensus) {
  delete consensus_;
  consensus_ = consensus;
  if (consensus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Genesis.consensus)
}

// repeated .corepb.GenesisTokenDistribution token_distribution = 3;
int Genesis::token_distribution_size() const {
  return token_distribution_.size();
}
void Genesis::clear_token_distribution() {
  token_distribution_.Clear();
}
const ::corepb::GenesisTokenDistribution& Genesis::token_distribution(int index) const {
  // @@protoc_insertion_point(field_get:corepb.Genesis.token_distribution)
  return token_distribution_.Get(index);
}
::corepb::GenesisTokenDistribution* Genesis::mutable_token_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.Genesis.token_distribution)
  return token_distribution_.Mutable(index);
}
::corepb::GenesisTokenDistribution* Genesis::add_token_distribution() {
  // @@protoc_insertion_point(field_add:corepb.Genesis.token_distribution)
  return token_distribution_.Add();
}
::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution >*
Genesis::mutable_token_distribution() {
  // @@protoc_insertion_point(field_mutable_list:corepb.Genesis.token_distribution)
  return &token_distribution_;
}
const ::google::protobuf::RepeatedPtrField< ::corepb::GenesisTokenDistribution >&
Genesis::token_distribution() const {
  // @@protoc_insertion_point(field_list:corepb.Genesis.token_distribution)
  return token_distribution_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenesisMeta::kChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenesisMeta::GenesisMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genesis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisMeta)
}
GenesisMeta::GenesisMeta(const GenesisMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_ = from.chain_id_;
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisMeta)
}

void GenesisMeta::SharedCtor() {
  chain_id_ = 0u;
  _cached_size_ = 0;
}

GenesisMeta::~GenesisMeta() {
  // @@protoc_insertion_point(destructor:corepb.GenesisMeta)
  SharedDtor();
}

void GenesisMeta::SharedDtor() {
}

void GenesisMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenesisMeta::descriptor() {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[1].descriptor;
}

const GenesisMeta& GenesisMeta::default_instance() {
  protobuf_genesis_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenesisMeta* GenesisMeta::New(::google::protobuf::Arena* arena) const {
  GenesisMeta* n = new GenesisMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenesisMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisMeta)
  chain_id_ = 0u;
}

bool GenesisMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.GenesisMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 chain_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.GenesisMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.GenesisMeta)
  return false;
#undef DO_
}

void GenesisMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.GenesisMeta)
  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chain_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.GenesisMeta)
}

::google::protobuf::uint8* GenesisMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisMeta)
  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chain_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisMeta)
  return target;
}

size_t GenesisMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisMeta)
  size_t total_size = 0;

  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chain_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenesisMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenesisMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisMeta)
    MergeFrom(*source);
  }
}

void GenesisMeta::MergeFrom(const GenesisMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
}

void GenesisMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisMeta::CopyFrom(const GenesisMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisMeta::IsInitialized() const {
  return true;
}

void GenesisMeta::Swap(GenesisMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenesisMeta::InternalSwap(GenesisMeta* other) {
  std::swap(chain_id_, other->chain_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenesisMeta::GetMetadata() const {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenesisMeta

// uint32 chain_id = 1;
void GenesisMeta::clear_chain_id() {
  chain_id_ = 0u;
}
::google::protobuf::uint32 GenesisMeta::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisMeta.chain_id)
  return chain_id_;
}
void GenesisMeta::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.GenesisMeta.chain_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenesisConsensus::kDposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenesisConsensus::GenesisConsensus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genesis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisConsensus)
}
GenesisConsensus::GenesisConsensus(const GenesisConsensus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dpos()) {
    dpos_ = new ::corepb::GenesisConsensusDpos(*from.dpos_);
  } else {
    dpos_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisConsensus)
}

void GenesisConsensus::SharedCtor() {
  dpos_ = NULL;
  _cached_size_ = 0;
}

GenesisConsensus::~GenesisConsensus() {
  // @@protoc_insertion_point(destructor:corepb.GenesisConsensus)
  SharedDtor();
}

void GenesisConsensus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dpos_;
  }
}

void GenesisConsensus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenesisConsensus::descriptor() {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[2].descriptor;
}

const GenesisConsensus& GenesisConsensus::default_instance() {
  protobuf_genesis_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenesisConsensus* GenesisConsensus::New(::google::protobuf::Arena* arena) const {
  GenesisConsensus* n = new GenesisConsensus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenesisConsensus::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisConsensus)
  if (GetArenaNoVirtual() == NULL && dpos_ != NULL) {
    delete dpos_;
  }
  dpos_ = NULL;
}

bool GenesisConsensus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.GenesisConsensus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .corepb.GenesisConsensusDpos dpos = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.GenesisConsensus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.GenesisConsensus)
  return false;
#undef DO_
}

void GenesisConsensus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.GenesisConsensus)
  // .corepb.GenesisConsensusDpos dpos = 1;
  if (this->has_dpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dpos_, output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.GenesisConsensus)
}

::google::protobuf::uint8* GenesisConsensus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisConsensus)
  // .corepb.GenesisConsensusDpos dpos = 1;
  if (this->has_dpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dpos_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisConsensus)
  return target;
}

size_t GenesisConsensus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisConsensus)
  size_t total_size = 0;

  // .corepb.GenesisConsensusDpos dpos = 1;
  if (this->has_dpos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dpos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenesisConsensus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisConsensus)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisConsensus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenesisConsensus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisConsensus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisConsensus)
    MergeFrom(*source);
  }
}

void GenesisConsensus::MergeFrom(const GenesisConsensus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisConsensus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dpos()) {
    mutable_dpos()->::corepb::GenesisConsensusDpos::MergeFrom(from.dpos());
  }
}

void GenesisConsensus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisConsensus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisConsensus::CopyFrom(const GenesisConsensus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisConsensus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisConsensus::IsInitialized() const {
  return true;
}

void GenesisConsensus::Swap(GenesisConsensus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenesisConsensus::InternalSwap(GenesisConsensus* other) {
  std::swap(dpos_, other->dpos_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenesisConsensus::GetMetadata() const {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenesisConsensus

// .corepb.GenesisConsensusDpos dpos = 1;
bool GenesisConsensus::has_dpos() const {
  return this != internal_default_instance() && dpos_ != NULL;
}
void GenesisConsensus::clear_dpos() {
  if (GetArenaNoVirtual() == NULL && dpos_ != NULL) delete dpos_;
  dpos_ = NULL;
}
const ::corepb::GenesisConsensusDpos& GenesisConsensus::dpos() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisConsensus.dpos)
  return dpos_ != NULL ? *dpos_
                         : *::corepb::GenesisConsensusDpos::internal_default_instance();
}
::corepb::GenesisConsensusDpos* GenesisConsensus::mutable_dpos() {
  
  if (dpos_ == NULL) {
    dpos_ = new ::corepb::GenesisConsensusDpos;
  }
  // @@protoc_insertion_point(field_mutable:corepb.GenesisConsensus.dpos)
  return dpos_;
}
::corepb::GenesisConsensusDpos* GenesisConsensus::release_dpos() {
  // @@protoc_insertion_point(field_release:corepb.GenesisConsensus.dpos)
  
  ::corepb::GenesisConsensusDpos* temp = dpos_;
  dpos_ = NULL;
  return temp;
}
void GenesisConsensus::set_allocated_dpos(::corepb::GenesisConsensusDpos* dpos) {
  delete dpos_;
  dpos_ = dpos;
  if (dpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.GenesisConsensus.dpos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenesisConsensusDpos::kDynastyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenesisConsensusDpos::GenesisConsensusDpos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genesis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisConsensusDpos)
}
GenesisConsensusDpos::GenesisConsensusDpos(const GenesisConsensusDpos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dynasty_(from.dynasty_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisConsensusDpos)
}

void GenesisConsensusDpos::SharedCtor() {
  _cached_size_ = 0;
}

GenesisConsensusDpos::~GenesisConsensusDpos() {
  // @@protoc_insertion_point(destructor:corepb.GenesisConsensusDpos)
  SharedDtor();
}

void GenesisConsensusDpos::SharedDtor() {
}

void GenesisConsensusDpos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenesisConsensusDpos::descriptor() {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[3].descriptor;
}

const GenesisConsensusDpos& GenesisConsensusDpos::default_instance() {
  protobuf_genesis_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenesisConsensusDpos* GenesisConsensusDpos::New(::google::protobuf::Arena* arena) const {
  GenesisConsensusDpos* n = new GenesisConsensusDpos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenesisConsensusDpos::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisConsensusDpos)
  dynasty_.Clear();
}

bool GenesisConsensusDpos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.GenesisConsensusDpos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string dynasty = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dynasty()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynasty(this->dynasty_size() - 1).data(),
            this->dynasty(this->dynasty_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.GenesisConsensusDpos.dynasty"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.GenesisConsensusDpos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.GenesisConsensusDpos)
  return false;
#undef DO_
}

void GenesisConsensusDpos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.GenesisConsensusDpos)
  // repeated string dynasty = 1;
  for (int i = 0; i < this->dynasty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynasty(i).data(), this->dynasty(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisConsensusDpos.dynasty");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dynasty(i), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.GenesisConsensusDpos)
}

::google::protobuf::uint8* GenesisConsensusDpos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisConsensusDpos)
  // repeated string dynasty = 1;
  for (int i = 0; i < this->dynasty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynasty(i).data(), this->dynasty(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisConsensusDpos.dynasty");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->dynasty(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisConsensusDpos)
  return target;
}

size_t GenesisConsensusDpos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisConsensusDpos)
  size_t total_size = 0;

  // repeated string dynasty = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dynasty_size());
  for (int i = 0; i < this->dynasty_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dynasty(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenesisConsensusDpos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisConsensusDpos)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisConsensusDpos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenesisConsensusDpos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisConsensusDpos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisConsensusDpos)
    MergeFrom(*source);
  }
}

void GenesisConsensusDpos::MergeFrom(const GenesisConsensusDpos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisConsensusDpos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dynasty_.MergeFrom(from.dynasty_);
}

void GenesisConsensusDpos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisConsensusDpos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisConsensusDpos::CopyFrom(const GenesisConsensusDpos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisConsensusDpos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisConsensusDpos::IsInitialized() const {
  return true;
}

void GenesisConsensusDpos::Swap(GenesisConsensusDpos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenesisConsensusDpos::InternalSwap(GenesisConsensusDpos* other) {
  dynasty_.UnsafeArenaSwap(&other->dynasty_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenesisConsensusDpos::GetMetadata() const {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenesisConsensusDpos

// repeated string dynasty = 1;
int GenesisConsensusDpos::dynasty_size() const {
  return dynasty_.size();
}
void GenesisConsensusDpos::clear_dynasty() {
  dynasty_.Clear();
}
const ::std::string& GenesisConsensusDpos::dynasty(int index) const {
  // @@protoc_insertion_point(field_get:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_.Get(index);
}
::std::string* GenesisConsensusDpos::mutable_dynasty(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_.Mutable(index);
}
void GenesisConsensusDpos::set_dynasty(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:corepb.GenesisConsensusDpos.dynasty)
  dynasty_.Mutable(index)->assign(value);
}
void GenesisConsensusDpos::set_dynasty(int index, const char* value) {
  dynasty_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:corepb.GenesisConsensusDpos.dynasty)
}
void GenesisConsensusDpos::set_dynasty(int index, const char* value, size_t size) {
  dynasty_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:corepb.GenesisConsensusDpos.dynasty)
}
::std::string* GenesisConsensusDpos::add_dynasty() {
  // @@protoc_insertion_point(field_add_mutable:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_.Add();
}
void GenesisConsensusDpos::add_dynasty(const ::std::string& value) {
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:corepb.GenesisConsensusDpos.dynasty)
}
void GenesisConsensusDpos::add_dynasty(const char* value) {
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:corepb.GenesisConsensusDpos.dynasty)
}
void GenesisConsensusDpos::add_dynasty(const char* value, size_t size) {
  dynasty_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:corepb.GenesisConsensusDpos.dynasty)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GenesisConsensusDpos::dynasty() const {
  // @@protoc_insertion_point(field_list:corepb.GenesisConsensusDpos.dynasty)
  return dynasty_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GenesisConsensusDpos::mutable_dynasty() {
  // @@protoc_insertion_point(field_mutable_list:corepb.GenesisConsensusDpos.dynasty)
  return &dynasty_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GenesisTokenDistribution::kAddressFieldNumber;
const int GenesisTokenDistribution::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenesisTokenDistribution::GenesisTokenDistribution()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genesis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.GenesisTokenDistribution)
}
GenesisTokenDistribution::GenesisTokenDistribution(const GenesisTokenDistribution& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:corepb.GenesisTokenDistribution)
}

void GenesisTokenDistribution::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GenesisTokenDistribution::~GenesisTokenDistribution() {
  // @@protoc_insertion_point(destructor:corepb.GenesisTokenDistribution)
  SharedDtor();
}

void GenesisTokenDistribution::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GenesisTokenDistribution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenesisTokenDistribution::descriptor() {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[4].descriptor;
}

const GenesisTokenDistribution& GenesisTokenDistribution::default_instance() {
  protobuf_genesis_2eproto::InitDefaults();
  return *internal_default_instance();
}

GenesisTokenDistribution* GenesisTokenDistribution::New(::google::protobuf::Arena* arena) const {
  GenesisTokenDistribution* n = new GenesisTokenDistribution;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GenesisTokenDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.GenesisTokenDistribution)
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GenesisTokenDistribution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.GenesisTokenDistribution)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string address = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.GenesisTokenDistribution.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.GenesisTokenDistribution.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.GenesisTokenDistribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.GenesisTokenDistribution)
  return false;
#undef DO_
}

void GenesisTokenDistribution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.GenesisTokenDistribution)
  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisTokenDistribution.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisTokenDistribution.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.GenesisTokenDistribution)
}

::google::protobuf::uint8* GenesisTokenDistribution::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.GenesisTokenDistribution)
  // string address = 1;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisTokenDistribution.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.GenesisTokenDistribution.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.GenesisTokenDistribution)
  return target;
}

size_t GenesisTokenDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.GenesisTokenDistribution)
  size_t total_size = 0;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenesisTokenDistribution::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.GenesisTokenDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const GenesisTokenDistribution* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenesisTokenDistribution>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.GenesisTokenDistribution)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.GenesisTokenDistribution)
    MergeFrom(*source);
  }
}

void GenesisTokenDistribution::MergeFrom(const GenesisTokenDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.GenesisTokenDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GenesisTokenDistribution::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.GenesisTokenDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenesisTokenDistribution::CopyFrom(const GenesisTokenDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.GenesisTokenDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisTokenDistribution::IsInitialized() const {
  return true;
}

void GenesisTokenDistribution::Swap(GenesisTokenDistribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenesisTokenDistribution::InternalSwap(GenesisTokenDistribution* other) {
  address_.Swap(&other->address_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GenesisTokenDistribution::GetMetadata() const {
  protobuf_genesis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genesis_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GenesisTokenDistribution

// string address = 1;
void GenesisTokenDistribution::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenesisTokenDistribution::address() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisTokenDistribution.address)
  return address_.GetNoArena();
}
void GenesisTokenDistribution::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.GenesisTokenDistribution.address)
}
#if LANG_CXX11
void GenesisTokenDistribution::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.GenesisTokenDistribution.address)
}
#endif
void GenesisTokenDistribution::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.GenesisTokenDistribution.address)
}
void GenesisTokenDistribution::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.GenesisTokenDistribution.address)
}
::std::string* GenesisTokenDistribution::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:corepb.GenesisTokenDistribution.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenesisTokenDistribution::release_address() {
  // @@protoc_insertion_point(field_release:corepb.GenesisTokenDistribution.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenesisTokenDistribution::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:corepb.GenesisTokenDistribution.address)
}

// string value = 2;
void GenesisTokenDistribution::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GenesisTokenDistribution::value() const {
  // @@protoc_insertion_point(field_get:corepb.GenesisTokenDistribution.value)
  return value_.GetNoArena();
}
void GenesisTokenDistribution::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:corepb.GenesisTokenDistribution.value)
}
#if LANG_CXX11
void GenesisTokenDistribution::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:corepb.GenesisTokenDistribution.value)
}
#endif
void GenesisTokenDistribution::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:corepb.GenesisTokenDistribution.value)
}
void GenesisTokenDistribution::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:corepb.GenesisTokenDistribution.value)
}
::std::string* GenesisTokenDistribution::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:corepb.GenesisTokenDistribution.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GenesisTokenDistribution::release_value() {
  // @@protoc_insertion_point(field_release:corepb.GenesisTokenDistribution.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GenesisTokenDistribution::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:corepb.GenesisTokenDistribution.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)
