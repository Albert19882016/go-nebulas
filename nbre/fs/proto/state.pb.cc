// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace consensuspb {
class ConsensusRootDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConsensusRoot> {
} _ConsensusRoot_default_instance_;

namespace protobuf_state_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRoot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRoot, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRoot, proposer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusRoot, dynasty_root_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ConsensusRoot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConsensusRoot_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "state.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ConsensusRoot_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ConsensusRoot_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013state.proto\022\013consensuspb\"J\n\rConsensusR"
      "oot\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010proposer\030\002 \001(\014"
      "\022\024\n\014dynasty_root\030\003 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 110);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "state.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_state_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusRoot::kTimestampFieldNumber;
const int ConsensusRoot::kProposerFieldNumber;
const int ConsensusRoot::kDynastyRootFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusRoot::ConsensusRoot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_state_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:consensuspb.ConsensusRoot)
}
ConsensusRoot::ConsensusRoot(const ConsensusRoot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proposer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proposer().size() > 0) {
    proposer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_);
  }
  dynasty_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dynasty_root().size() > 0) {
    dynasty_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynasty_root_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:consensuspb.ConsensusRoot)
}

void ConsensusRoot::SharedCtor() {
  proposer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynasty_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ConsensusRoot::~ConsensusRoot() {
  // @@protoc_insertion_point(destructor:consensuspb.ConsensusRoot)
  SharedDtor();
}

void ConsensusRoot::SharedDtor() {
  proposer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynasty_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConsensusRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusRoot::descriptor() {
  protobuf_state_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_state_2eproto::file_level_metadata[0].descriptor;
}

const ConsensusRoot& ConsensusRoot::default_instance() {
  protobuf_state_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConsensusRoot* ConsensusRoot::New(::google::protobuf::Arena* arena) const {
  ConsensusRoot* n = new ConsensusRoot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:consensuspb.ConsensusRoot)
  proposer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynasty_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool ConsensusRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:consensuspb.ConsensusRoot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proposer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proposer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes dynasty_root = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dynasty_root()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:consensuspb.ConsensusRoot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:consensuspb.ConsensusRoot)
  return false;
#undef DO_
}

void ConsensusRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:consensuspb.ConsensusRoot)
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // bytes proposer = 2;
  if (this->proposer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->proposer(), output);
  }

  // bytes dynasty_root = 3;
  if (this->dynasty_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->dynasty_root(), output);
  }

  // @@protoc_insertion_point(serialize_end:consensuspb.ConsensusRoot)
}

::google::protobuf::uint8* ConsensusRoot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:consensuspb.ConsensusRoot)
  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // bytes proposer = 2;
  if (this->proposer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->proposer(), target);
  }

  // bytes dynasty_root = 3;
  if (this->dynasty_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->dynasty_root(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:consensuspb.ConsensusRoot)
  return target;
}

size_t ConsensusRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:consensuspb.ConsensusRoot)
  size_t total_size = 0;

  // bytes proposer = 2;
  if (this->proposer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proposer());
  }

  // bytes dynasty_root = 3;
  if (this->dynasty_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dynasty_root());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusRoot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:consensuspb.ConsensusRoot)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusRoot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusRoot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:consensuspb.ConsensusRoot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:consensuspb.ConsensusRoot)
    MergeFrom(*source);
  }
}

void ConsensusRoot::MergeFrom(const ConsensusRoot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:consensuspb.ConsensusRoot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.proposer().size() > 0) {

    proposer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_);
  }
  if (from.dynasty_root().size() > 0) {

    dynasty_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynasty_root_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ConsensusRoot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:consensuspb.ConsensusRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusRoot::CopyFrom(const ConsensusRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:consensuspb.ConsensusRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusRoot::IsInitialized() const {
  return true;
}

void ConsensusRoot::Swap(ConsensusRoot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusRoot::InternalSwap(ConsensusRoot* other) {
  proposer_.Swap(&other->proposer_);
  dynasty_root_.Swap(&other->dynasty_root_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusRoot::GetMetadata() const {
  protobuf_state_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_state_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusRoot

// int64 timestamp = 1;
void ConsensusRoot::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConsensusRoot::timestamp() const {
  // @@protoc_insertion_point(field_get:consensuspb.ConsensusRoot.timestamp)
  return timestamp_;
}
void ConsensusRoot::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:consensuspb.ConsensusRoot.timestamp)
}

// bytes proposer = 2;
void ConsensusRoot::clear_proposer() {
  proposer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConsensusRoot::proposer() const {
  // @@protoc_insertion_point(field_get:consensuspb.ConsensusRoot.proposer)
  return proposer_.GetNoArena();
}
void ConsensusRoot::set_proposer(const ::std::string& value) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:consensuspb.ConsensusRoot.proposer)
}
#if LANG_CXX11
void ConsensusRoot::set_proposer(::std::string&& value) {
  
  proposer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:consensuspb.ConsensusRoot.proposer)
}
#endif
void ConsensusRoot::set_proposer(const char* value) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:consensuspb.ConsensusRoot.proposer)
}
void ConsensusRoot::set_proposer(const void* value, size_t size) {
  
  proposer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:consensuspb.ConsensusRoot.proposer)
}
::std::string* ConsensusRoot::mutable_proposer() {
  
  // @@protoc_insertion_point(field_mutable:consensuspb.ConsensusRoot.proposer)
  return proposer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusRoot::release_proposer() {
  // @@protoc_insertion_point(field_release:consensuspb.ConsensusRoot.proposer)
  
  return proposer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusRoot::set_allocated_proposer(::std::string* proposer) {
  if (proposer != NULL) {
    
  } else {
    
  }
  proposer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer);
  // @@protoc_insertion_point(field_set_allocated:consensuspb.ConsensusRoot.proposer)
}

// bytes dynasty_root = 3;
void ConsensusRoot::clear_dynasty_root() {
  dynasty_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConsensusRoot::dynasty_root() const {
  // @@protoc_insertion_point(field_get:consensuspb.ConsensusRoot.dynasty_root)
  return dynasty_root_.GetNoArena();
}
void ConsensusRoot::set_dynasty_root(const ::std::string& value) {
  
  dynasty_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:consensuspb.ConsensusRoot.dynasty_root)
}
#if LANG_CXX11
void ConsensusRoot::set_dynasty_root(::std::string&& value) {
  
  dynasty_root_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:consensuspb.ConsensusRoot.dynasty_root)
}
#endif
void ConsensusRoot::set_dynasty_root(const char* value) {
  
  dynasty_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:consensuspb.ConsensusRoot.dynasty_root)
}
void ConsensusRoot::set_dynasty_root(const void* value, size_t size) {
  
  dynasty_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:consensuspb.ConsensusRoot.dynasty_root)
}
::std::string* ConsensusRoot::mutable_dynasty_root() {
  
  // @@protoc_insertion_point(field_mutable:consensuspb.ConsensusRoot.dynasty_root)
  return dynasty_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConsensusRoot::release_dynasty_root() {
  // @@protoc_insertion_point(field_release:consensuspb.ConsensusRoot.dynasty_root)
  
  return dynasty_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConsensusRoot::set_allocated_dynasty_root(::std::string* dynasty_root) {
  if (dynasty_root != NULL) {
    
  } else {
    
  }
  dynasty_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynasty_root);
  // @@protoc_insertion_point(field_set_allocated:consensuspb.ConsensusRoot.dynasty_root)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace consensuspb

// @@protoc_insertion_point(global_scope)
