// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynasty.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dynasty.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace corepb {
class DynastyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dynasty> {
} _Dynasty_default_instance_;
class DynastyMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynastyMeta> {
} _DynastyMeta_default_instance_;
class DynastyCandidateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynastyCandidate> {
} _DynastyCandidate_default_instance_;

namespace protobuf_dynasty_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dynasty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dynasty, meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dynasty, candidate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynastyMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynastyMeta, chain_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynastyCandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynastyCandidate, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynastyCandidate, dynasty_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Dynasty)},
  { 6, -1, sizeof(DynastyMeta)},
  { 11, -1, sizeof(DynastyCandidate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Dynasty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DynastyMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DynastyCandidate_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dynasty.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Dynasty_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DynastyMeta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DynastyCandidate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Dynasty_default_instance_.DefaultConstruct();
  _DynastyMeta_default_instance_.DefaultConstruct();
  _DynastyCandidate_default_instance_.DefaultConstruct();
  _Dynasty_default_instance_.get_mutable()->meta_ = const_cast< ::corepb::DynastyMeta*>(
      ::corepb::DynastyMeta::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rdynasty.proto\022\006corepb\"Y\n\007Dynasty\022!\n\004me"
      "ta\030\001 \001(\0132\023.corepb.DynastyMeta\022+\n\tcandida"
      "te\030\002 \003(\0132\030.corepb.DynastyCandidate\"\037\n\013Dy"
      "nastyMeta\022\020\n\010chain_id\030\001 \001(\r\"3\n\020DynastyCa"
      "ndidate\022\016\n\006serial\030\001 \001(\004\022\017\n\007dynasty\030\002 \003(\t"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynasty.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dynasty_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dynasty::kMetaFieldNumber;
const int Dynasty::kCandidateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dynasty::Dynasty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dynasty_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.Dynasty)
}
Dynasty::Dynasty(const Dynasty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      candidate_(from.candidate_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_meta()) {
    meta_ = new ::corepb::DynastyMeta(*from.meta_);
  } else {
    meta_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:corepb.Dynasty)
}

void Dynasty::SharedCtor() {
  meta_ = NULL;
  _cached_size_ = 0;
}

Dynasty::~Dynasty() {
  // @@protoc_insertion_point(destructor:corepb.Dynasty)
  SharedDtor();
}

void Dynasty::SharedDtor() {
  if (this != internal_default_instance()) {
    delete meta_;
  }
}

void Dynasty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dynasty::descriptor() {
  protobuf_dynasty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynasty_2eproto::file_level_metadata[0].descriptor;
}

const Dynasty& Dynasty::default_instance() {
  protobuf_dynasty_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dynasty* Dynasty::New(::google::protobuf::Arena* arena) const {
  Dynasty* n = new Dynasty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dynasty::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.Dynasty)
  candidate_.Clear();
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) {
    delete meta_;
  }
  meta_ = NULL;
}

bool Dynasty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.Dynasty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .corepb.DynastyMeta meta = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .corepb.DynastyCandidate candidate = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.Dynasty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.Dynasty)
  return false;
#undef DO_
}

void Dynasty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.Dynasty)
  // .corepb.DynastyMeta meta = 1;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->meta_, output);
  }

  // repeated .corepb.DynastyCandidate candidate = 2;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->candidate(i), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.Dynasty)
}

::google::protobuf::uint8* Dynasty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.Dynasty)
  // .corepb.DynastyMeta meta = 1;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->meta_, false, target);
  }

  // repeated .corepb.DynastyCandidate candidate = 2;
  for (unsigned int i = 0, n = this->candidate_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->candidate(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.Dynasty)
  return target;
}

size_t Dynasty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.Dynasty)
  size_t total_size = 0;

  // repeated .corepb.DynastyCandidate candidate = 2;
  {
    unsigned int count = this->candidate_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->candidate(i));
    }
  }

  // .corepb.DynastyMeta meta = 1;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dynasty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.Dynasty)
  GOOGLE_DCHECK_NE(&from, this);
  const Dynasty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dynasty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.Dynasty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.Dynasty)
    MergeFrom(*source);
  }
}

void Dynasty::MergeFrom(const Dynasty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.Dynasty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_.MergeFrom(from.candidate_);
  if (from.has_meta()) {
    mutable_meta()->::corepb::DynastyMeta::MergeFrom(from.meta());
  }
}

void Dynasty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.Dynasty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dynasty::CopyFrom(const Dynasty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.Dynasty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dynasty::IsInitialized() const {
  return true;
}

void Dynasty::Swap(Dynasty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dynasty::InternalSwap(Dynasty* other) {
  candidate_.UnsafeArenaSwap(&other->candidate_);
  std::swap(meta_, other->meta_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Dynasty::GetMetadata() const {
  protobuf_dynasty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynasty_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dynasty

// .corepb.DynastyMeta meta = 1;
bool Dynasty::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void Dynasty::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::corepb::DynastyMeta& Dynasty::meta() const {
  // @@protoc_insertion_point(field_get:corepb.Dynasty.meta)
  return meta_ != NULL ? *meta_
                         : *::corepb::DynastyMeta::internal_default_instance();
}
::corepb::DynastyMeta* Dynasty::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::corepb::DynastyMeta;
  }
  // @@protoc_insertion_point(field_mutable:corepb.Dynasty.meta)
  return meta_;
}
::corepb::DynastyMeta* Dynasty::release_meta() {
  // @@protoc_insertion_point(field_release:corepb.Dynasty.meta)
  
  ::corepb::DynastyMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void Dynasty::set_allocated_meta(::corepb::DynastyMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:corepb.Dynasty.meta)
}

// repeated .corepb.DynastyCandidate candidate = 2;
int Dynasty::candidate_size() const {
  return candidate_.size();
}
void Dynasty::clear_candidate() {
  candidate_.Clear();
}
const ::corepb::DynastyCandidate& Dynasty::candidate(int index) const {
  // @@protoc_insertion_point(field_get:corepb.Dynasty.candidate)
  return candidate_.Get(index);
}
::corepb::DynastyCandidate* Dynasty::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.Dynasty.candidate)
  return candidate_.Mutable(index);
}
::corepb::DynastyCandidate* Dynasty::add_candidate() {
  // @@protoc_insertion_point(field_add:corepb.Dynasty.candidate)
  return candidate_.Add();
}
::google::protobuf::RepeatedPtrField< ::corepb::DynastyCandidate >*
Dynasty::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:corepb.Dynasty.candidate)
  return &candidate_;
}
const ::google::protobuf::RepeatedPtrField< ::corepb::DynastyCandidate >&
Dynasty::candidate() const {
  // @@protoc_insertion_point(field_list:corepb.Dynasty.candidate)
  return candidate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynastyMeta::kChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynastyMeta::DynastyMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dynasty_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.DynastyMeta)
}
DynastyMeta::DynastyMeta(const DynastyMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_ = from.chain_id_;
  // @@protoc_insertion_point(copy_constructor:corepb.DynastyMeta)
}

void DynastyMeta::SharedCtor() {
  chain_id_ = 0u;
  _cached_size_ = 0;
}

DynastyMeta::~DynastyMeta() {
  // @@protoc_insertion_point(destructor:corepb.DynastyMeta)
  SharedDtor();
}

void DynastyMeta::SharedDtor() {
}

void DynastyMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynastyMeta::descriptor() {
  protobuf_dynasty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynasty_2eproto::file_level_metadata[1].descriptor;
}

const DynastyMeta& DynastyMeta::default_instance() {
  protobuf_dynasty_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynastyMeta* DynastyMeta::New(::google::protobuf::Arena* arena) const {
  DynastyMeta* n = new DynastyMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynastyMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.DynastyMeta)
  chain_id_ = 0u;
}

bool DynastyMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.DynastyMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 chain_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.DynastyMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.DynastyMeta)
  return false;
#undef DO_
}

void DynastyMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.DynastyMeta)
  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chain_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.DynastyMeta)
}

::google::protobuf::uint8* DynastyMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.DynastyMeta)
  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chain_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.DynastyMeta)
  return target;
}

size_t DynastyMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.DynastyMeta)
  size_t total_size = 0;

  // uint32 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->chain_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynastyMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.DynastyMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const DynastyMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynastyMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.DynastyMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.DynastyMeta)
    MergeFrom(*source);
  }
}

void DynastyMeta::MergeFrom(const DynastyMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.DynastyMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
}

void DynastyMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.DynastyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynastyMeta::CopyFrom(const DynastyMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.DynastyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynastyMeta::IsInitialized() const {
  return true;
}

void DynastyMeta::Swap(DynastyMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynastyMeta::InternalSwap(DynastyMeta* other) {
  std::swap(chain_id_, other->chain_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynastyMeta::GetMetadata() const {
  protobuf_dynasty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynasty_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynastyMeta

// uint32 chain_id = 1;
void DynastyMeta::clear_chain_id() {
  chain_id_ = 0u;
}
::google::protobuf::uint32 DynastyMeta::chain_id() const {
  // @@protoc_insertion_point(field_get:corepb.DynastyMeta.chain_id)
  return chain_id_;
}
void DynastyMeta::set_chain_id(::google::protobuf::uint32 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:corepb.DynastyMeta.chain_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynastyCandidate::kSerialFieldNumber;
const int DynastyCandidate::kDynastyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynastyCandidate::DynastyCandidate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dynasty_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:corepb.DynastyCandidate)
}
DynastyCandidate::DynastyCandidate(const DynastyCandidate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dynasty_(from.dynasty_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serial_ = from.serial_;
  // @@protoc_insertion_point(copy_constructor:corepb.DynastyCandidate)
}

void DynastyCandidate::SharedCtor() {
  serial_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

DynastyCandidate::~DynastyCandidate() {
  // @@protoc_insertion_point(destructor:corepb.DynastyCandidate)
  SharedDtor();
}

void DynastyCandidate::SharedDtor() {
}

void DynastyCandidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynastyCandidate::descriptor() {
  protobuf_dynasty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynasty_2eproto::file_level_metadata[2].descriptor;
}

const DynastyCandidate& DynastyCandidate::default_instance() {
  protobuf_dynasty_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynastyCandidate* DynastyCandidate::New(::google::protobuf::Arena* arena) const {
  DynastyCandidate* n = new DynastyCandidate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynastyCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:corepb.DynastyCandidate)
  dynasty_.Clear();
  serial_ = GOOGLE_ULONGLONG(0);
}

bool DynastyCandidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:corepb.DynastyCandidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 serial = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dynasty = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dynasty()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dynasty(this->dynasty_size() - 1).data(),
            this->dynasty(this->dynasty_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "corepb.DynastyCandidate.dynasty"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:corepb.DynastyCandidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:corepb.DynastyCandidate)
  return false;
#undef DO_
}

void DynastyCandidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:corepb.DynastyCandidate)
  // uint64 serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serial(), output);
  }

  // repeated string dynasty = 2;
  for (int i = 0; i < this->dynasty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynasty(i).data(), this->dynasty(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.DynastyCandidate.dynasty");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dynasty(i), output);
  }

  // @@protoc_insertion_point(serialize_end:corepb.DynastyCandidate)
}

::google::protobuf::uint8* DynastyCandidate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:corepb.DynastyCandidate)
  // uint64 serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serial(), target);
  }

  // repeated string dynasty = 2;
  for (int i = 0; i < this->dynasty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dynasty(i).data(), this->dynasty(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "corepb.DynastyCandidate.dynasty");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->dynasty(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:corepb.DynastyCandidate)
  return target;
}

size_t DynastyCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:corepb.DynastyCandidate)
  size_t total_size = 0;

  // repeated string dynasty = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dynasty_size());
  for (int i = 0; i < this->dynasty_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dynasty(i));
  }

  // uint64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serial());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynastyCandidate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:corepb.DynastyCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  const DynastyCandidate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynastyCandidate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:corepb.DynastyCandidate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:corepb.DynastyCandidate)
    MergeFrom(*source);
  }
}

void DynastyCandidate::MergeFrom(const DynastyCandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:corepb.DynastyCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dynasty_.MergeFrom(from.dynasty_);
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
}

void DynastyCandidate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:corepb.DynastyCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynastyCandidate::CopyFrom(const DynastyCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:corepb.DynastyCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynastyCandidate::IsInitialized() const {
  return true;
}

void DynastyCandidate::Swap(DynastyCandidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynastyCandidate::InternalSwap(DynastyCandidate* other) {
  dynasty_.UnsafeArenaSwap(&other->dynasty_);
  std::swap(serial_, other->serial_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynastyCandidate::GetMetadata() const {
  protobuf_dynasty_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dynasty_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynastyCandidate

// uint64 serial = 1;
void DynastyCandidate::clear_serial() {
  serial_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DynastyCandidate::serial() const {
  // @@protoc_insertion_point(field_get:corepb.DynastyCandidate.serial)
  return serial_;
}
void DynastyCandidate::set_serial(::google::protobuf::uint64 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:corepb.DynastyCandidate.serial)
}

// repeated string dynasty = 2;
int DynastyCandidate::dynasty_size() const {
  return dynasty_.size();
}
void DynastyCandidate::clear_dynasty() {
  dynasty_.Clear();
}
const ::std::string& DynastyCandidate::dynasty(int index) const {
  // @@protoc_insertion_point(field_get:corepb.DynastyCandidate.dynasty)
  return dynasty_.Get(index);
}
::std::string* DynastyCandidate::mutable_dynasty(int index) {
  // @@protoc_insertion_point(field_mutable:corepb.DynastyCandidate.dynasty)
  return dynasty_.Mutable(index);
}
void DynastyCandidate::set_dynasty(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:corepb.DynastyCandidate.dynasty)
  dynasty_.Mutable(index)->assign(value);
}
void DynastyCandidate::set_dynasty(int index, const char* value) {
  dynasty_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:corepb.DynastyCandidate.dynasty)
}
void DynastyCandidate::set_dynasty(int index, const char* value, size_t size) {
  dynasty_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:corepb.DynastyCandidate.dynasty)
}
::std::string* DynastyCandidate::add_dynasty() {
  // @@protoc_insertion_point(field_add_mutable:corepb.DynastyCandidate.dynasty)
  return dynasty_.Add();
}
void DynastyCandidate::add_dynasty(const ::std::string& value) {
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:corepb.DynastyCandidate.dynasty)
}
void DynastyCandidate::add_dynasty(const char* value) {
  dynasty_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:corepb.DynastyCandidate.dynasty)
}
void DynastyCandidate::add_dynasty(const char* value, size_t size) {
  dynasty_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:corepb.DynastyCandidate.dynasty)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
DynastyCandidate::dynasty() const {
  // @@protoc_insertion_point(field_list:corepb.DynastyCandidate.dynasty)
  return dynasty_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
DynastyCandidate::mutable_dynasty() {
  // @@protoc_insertion_point(field_mutable_list:corepb.DynastyCandidate.dynasty)
  return &dynasty_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace corepb

// @@protoc_insertion_point(global_scope)
